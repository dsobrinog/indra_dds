// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file bigsampleTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#include "bigsampleTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>
#include "bigsample.hpp"


using namespace eprosima::fastdds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_BigSample_type_identifier(
        TypeIdentifierPair& type_ids_BigSample)
{

    ReturnCode_t return_code_BigSample {eprosima::fastdds::dds::RETCODE_OK};
    return_code_BigSample =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "BigSample", type_ids_BigSample);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_BigSample)
    {
        StructTypeFlag struct_flags_BigSample = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_BigSample = "BigSample";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_BigSample;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_BigSample;
        CompleteTypeDetail detail_BigSample = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_BigSample, ann_custom_BigSample, type_name_BigSample.to_string());
        CompleteStructHeader header_BigSample;
        header_BigSample = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_BigSample);
        CompleteStructMemberSeq member_seq_BigSample;
        {
            TypeIdentifierPair type_ids_payload;
            ReturnCode_t return_code_payload {eprosima::fastdds::dds::RETCODE_OK};
            return_code_payload =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_byte_10000", type_ids_payload);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_payload)
            {
                return_code_payload =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids_payload);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_payload)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_byte_10000_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_byte_10000 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_payload, element_identifier_anonymous_array_byte_10000_ec))};
                if (!element_identifier_anonymous_array_byte_10000_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_byte_10000 = EK_COMPLETE;
                if (TK_NONE == type_ids_payload.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_byte_10000 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_byte_10000 = 0;
                PlainCollectionHeader header_anonymous_array_byte_10000 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_byte_10000, element_flags_anonymous_array_byte_10000);
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(10000));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header_anonymous_array_byte_10000, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_byte_10000));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_byte_10000", type_ids_payload))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_byte_10000 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_payload = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_payload = 0x00000000;
            bool common_payload_ec {false};
            CommonStructMember common_payload {TypeObjectUtils::build_common_struct_member(member_id_payload, member_flags_payload, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_payload, common_payload_ec))};
            if (!common_payload_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure payload member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_payload = "payload";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_payload;
            ann_custom_BigSample.reset();
            CompleteMemberDetail detail_payload = TypeObjectUtils::build_complete_member_detail(name_payload, member_ann_builtin_payload, ann_custom_BigSample);
            CompleteStructMember member_payload = TypeObjectUtils::build_complete_struct_member(common_payload, detail_payload);
            TypeObjectUtils::add_complete_struct_member(member_seq_BigSample, member_payload);
        }
        CompleteStructType struct_type_BigSample = TypeObjectUtils::build_complete_struct_type(struct_flags_BigSample, header_BigSample, member_seq_BigSample);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_BigSample, type_name_BigSample.to_string(), type_ids_BigSample))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "BigSample already registered in TypeObjectRegistry for a different type.");
        }
    }
}
