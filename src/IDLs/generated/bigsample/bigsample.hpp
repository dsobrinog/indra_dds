// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file bigsample.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#ifndef FAST_DDS_GENERATED__BIGSAMPLE_HPP
#define FAST_DDS_GENERATED__BIGSAMPLE_HPP

#include <array>
#include <cstdint>
#include <utility>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(BIGSAMPLE_SOURCE)
#define BIGSAMPLE_DllAPI __declspec( dllexport )
#else
#define BIGSAMPLE_DllAPI __declspec( dllimport )
#endif // BIGSAMPLE_SOURCE
#else
#define BIGSAMPLE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define BIGSAMPLE_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure BigSample defined by the user in the IDL file.
 * @ingroup bigsample
 */
class BigSample
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport BigSample()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~BigSample()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object BigSample that will be copied.
     */
    eProsima_user_DllExport BigSample(
            const BigSample& x)
    {
                    m_payload = x.m_payload;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object BigSample that will be copied.
     */
    eProsima_user_DllExport BigSample(
            BigSample&& x) noexcept
    {
        m_payload = std::move(x.m_payload);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object BigSample that will be copied.
     */
    eProsima_user_DllExport BigSample& operator =(
            const BigSample& x)
    {

                    m_payload = x.m_payload;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object BigSample that will be copied.
     */
    eProsima_user_DllExport BigSample& operator =(
            BigSample&& x) noexcept
    {

        m_payload = std::move(x.m_payload);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x BigSample object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const BigSample& x) const
    {
        return (m_payload == x.m_payload);
    }

    /*!
     * @brief Comparison operator.
     * @param x BigSample object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const BigSample& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member payload
     * @param _payload New value to be copied in member payload
     */
    eProsima_user_DllExport void payload(
            const std::array<uint8_t, 10000>& _payload)
    {
        m_payload = _payload;
    }

    /*!
     * @brief This function moves the value in member payload
     * @param _payload New value to be moved in member payload
     */
    eProsima_user_DllExport void payload(
            std::array<uint8_t, 10000>&& _payload)
    {
        m_payload = std::move(_payload);
    }

    /*!
     * @brief This function returns a constant reference to member payload
     * @return Constant reference to member payload
     */
    eProsima_user_DllExport const std::array<uint8_t, 10000>& payload() const
    {
        return m_payload;
    }

    /*!
     * @brief This function returns a reference to member payload
     * @return Reference to member payload
     */
    eProsima_user_DllExport std::array<uint8_t, 10000>& payload()
    {
        return m_payload;
    }



private:

    std::array<uint8_t, 10000> m_payload{0};

};

#endif // _FAST_DDS_GENERATED_BIGSAMPLE_HPP_


