// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file inseTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#include "inseTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>
#include "inse.hpp"


using namespace eprosima::fastdds::dds::xtypes;

void register_EntityClass_type_identifier(
        TypeIdentifierPair& type_ids_EntityClass)
{
    ReturnCode_t return_code_EntityClass {eprosima::fastdds::dds::RETCODE_OK};
    return_code_EntityClass =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "EntityClass", type_ids_EntityClass);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_EntityClass)
    {
        EnumTypeFlag enum_flags_EntityClass = 0;
        BitBound bit_bound_EntityClass = 32;
        CommonEnumeratedHeader common_EntityClass = TypeObjectUtils::build_common_enumerated_header(bit_bound_EntityClass);
        QualifiedTypeName type_name_EntityClass = "EntityClass";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_EntityClass;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_EntityClass;
        CompleteTypeDetail detail_EntityClass = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_EntityClass, ann_custom_EntityClass, type_name_EntityClass.to_string());
        CompleteEnumeratedHeader header_EntityClass = TypeObjectUtils::build_complete_enumerated_header(common_EntityClass, detail_EntityClass);
        CompleteEnumeratedLiteralSeq literal_seq_EntityClass;
        {
            EnumeratedLiteralFlag flags_None = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_None = TypeObjectUtils::build_common_enumerated_literal(0, flags_None);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_None;
            ann_custom_EntityClass.reset();
            AppliedAnnotationSeq tmp_ann_custom_None;
            if (!tmp_ann_custom_None.empty())
            {
                ann_custom_EntityClass = tmp_ann_custom_None;
            }
            MemberName name_None = "None";
            CompleteMemberDetail detail_None = TypeObjectUtils::build_complete_member_detail(name_None, member_ann_builtin_None, ann_custom_EntityClass);
            CompleteEnumeratedLiteral literal_None = TypeObjectUtils::build_complete_enumerated_literal(common_None, detail_None);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityClass, literal_None);
        }
        {
            EnumeratedLiteralFlag flags_Air = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Air = TypeObjectUtils::build_common_enumerated_literal(1, flags_Air);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Air;
            ann_custom_EntityClass.reset();
            MemberName name_Air = "Air";
            CompleteMemberDetail detail_Air = TypeObjectUtils::build_complete_member_detail(name_Air, member_ann_builtin_Air, ann_custom_EntityClass);
            CompleteEnumeratedLiteral literal_Air = TypeObjectUtils::build_complete_enumerated_literal(common_Air, detail_Air);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityClass, literal_Air);
        }
        {
            EnumeratedLiteralFlag flags_MovingGround = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_MovingGround = TypeObjectUtils::build_common_enumerated_literal(2, flags_MovingGround);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MovingGround;
            ann_custom_EntityClass.reset();
            MemberName name_MovingGround = "MovingGround";
            CompleteMemberDetail detail_MovingGround = TypeObjectUtils::build_complete_member_detail(name_MovingGround, member_ann_builtin_MovingGround, ann_custom_EntityClass);
            CompleteEnumeratedLiteral literal_MovingGround = TypeObjectUtils::build_complete_enumerated_literal(common_MovingGround, detail_MovingGround);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityClass, literal_MovingGround);
        }
        {
            EnumeratedLiteralFlag flags_MovingNaval = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_MovingNaval = TypeObjectUtils::build_common_enumerated_literal(3, flags_MovingNaval);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MovingNaval;
            ann_custom_EntityClass.reset();
            MemberName name_MovingNaval = "MovingNaval";
            CompleteMemberDetail detail_MovingNaval = TypeObjectUtils::build_complete_member_detail(name_MovingNaval, member_ann_builtin_MovingNaval, ann_custom_EntityClass);
            CompleteEnumeratedLiteral literal_MovingNaval = TypeObjectUtils::build_complete_enumerated_literal(common_MovingNaval, detail_MovingNaval);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityClass, literal_MovingNaval);
        }
        {
            EnumeratedLiteralFlag flags_NoMovingGround = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_NoMovingGround = TypeObjectUtils::build_common_enumerated_literal(4, flags_NoMovingGround);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_NoMovingGround;
            ann_custom_EntityClass.reset();
            MemberName name_NoMovingGround = "NoMovingGround";
            CompleteMemberDetail detail_NoMovingGround = TypeObjectUtils::build_complete_member_detail(name_NoMovingGround, member_ann_builtin_NoMovingGround, ann_custom_EntityClass);
            CompleteEnumeratedLiteral literal_NoMovingGround = TypeObjectUtils::build_complete_enumerated_literal(common_NoMovingGround, detail_NoMovingGround);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityClass, literal_NoMovingGround);
        }
        {
            EnumeratedLiteralFlag flags_HumanBeing = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_HumanBeing = TypeObjectUtils::build_common_enumerated_literal(5, flags_HumanBeing);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_HumanBeing;
            ann_custom_EntityClass.reset();
            MemberName name_HumanBeing = "HumanBeing";
            CompleteMemberDetail detail_HumanBeing = TypeObjectUtils::build_complete_member_detail(name_HumanBeing, member_ann_builtin_HumanBeing, ann_custom_EntityClass);
            CompleteEnumeratedLiteral literal_HumanBeing = TypeObjectUtils::build_complete_enumerated_literal(common_HumanBeing, detail_HumanBeing);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityClass, literal_HumanBeing);
        }
        {
            EnumeratedLiteralFlag flags_Submarine = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Submarine = TypeObjectUtils::build_common_enumerated_literal(6, flags_Submarine);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Submarine;
            ann_custom_EntityClass.reset();
            MemberName name_Submarine = "Submarine";
            CompleteMemberDetail detail_Submarine = TypeObjectUtils::build_complete_member_detail(name_Submarine, member_ann_builtin_Submarine, ann_custom_EntityClass);
            CompleteEnumeratedLiteral literal_Submarine = TypeObjectUtils::build_complete_enumerated_literal(common_Submarine, detail_Submarine);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityClass, literal_Submarine);
        }
        {
            EnumeratedLiteralFlag flags_Weapon = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Weapon = TypeObjectUtils::build_common_enumerated_literal(7, flags_Weapon);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Weapon;
            ann_custom_EntityClass.reset();
            MemberName name_Weapon = "Weapon";
            CompleteMemberDetail detail_Weapon = TypeObjectUtils::build_complete_member_detail(name_Weapon, member_ann_builtin_Weapon, ann_custom_EntityClass);
            CompleteEnumeratedLiteral literal_Weapon = TypeObjectUtils::build_complete_enumerated_literal(common_Weapon, detail_Weapon);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityClass, literal_Weapon);
        }
        CompleteEnumeratedType enumerated_type_EntityClass = TypeObjectUtils::build_complete_enumerated_type(enum_flags_EntityClass, header_EntityClass,
                literal_seq_EntityClass);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_EntityClass, type_name_EntityClass.to_string(), type_ids_EntityClass))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "EntityClass already registered in TypeObjectRegistry for a different type.");
        }
    }
}void register_EntityTypesAir_type_identifier(
        TypeIdentifierPair& type_ids_EntityTypesAir)
{
    ReturnCode_t return_code_EntityTypesAir {eprosima::fastdds::dds::RETCODE_OK};
    return_code_EntityTypesAir =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "EntityTypesAir", type_ids_EntityTypesAir);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_EntityTypesAir)
    {
        EnumTypeFlag enum_flags_EntityTypesAir = 0;
        BitBound bit_bound_EntityTypesAir = 32;
        CommonEnumeratedHeader common_EntityTypesAir = TypeObjectUtils::build_common_enumerated_header(bit_bound_EntityTypesAir);
        QualifiedTypeName type_name_EntityTypesAir = "EntityTypesAir";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_EntityTypesAir;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_EntityTypesAir;
        CompleteTypeDetail detail_EntityTypesAir = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_EntityTypesAir, ann_custom_EntityTypesAir, type_name_EntityTypesAir.to_string());
        CompleteEnumeratedHeader header_EntityTypesAir = TypeObjectUtils::build_complete_enumerated_header(common_EntityTypesAir, detail_EntityTypesAir);
        CompleteEnumeratedLiteralSeq literal_seq_EntityTypesAir;
        {
            EnumeratedLiteralFlag flags_Tanker = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Tanker = TypeObjectUtils::build_common_enumerated_literal(1, flags_Tanker);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Tanker;
            ann_custom_EntityTypesAir.reset();
            AppliedAnnotationSeq tmp_ann_custom_Tanker;
            if (!tmp_ann_custom_Tanker.empty())
            {
                ann_custom_EntityTypesAir = tmp_ann_custom_Tanker;
            }
            MemberName name_Tanker = "Tanker";
            CompleteMemberDetail detail_Tanker = TypeObjectUtils::build_complete_member_detail(name_Tanker, member_ann_builtin_Tanker, ann_custom_EntityTypesAir);
            CompleteEnumeratedLiteral literal_Tanker = TypeObjectUtils::build_complete_enumerated_literal(common_Tanker, detail_Tanker);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityTypesAir, literal_Tanker);
        }
        {
            EnumeratedLiteralFlag flags_TransportAircraft = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_TransportAircraft = TypeObjectUtils::build_common_enumerated_literal(1, flags_TransportAircraft);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_TransportAircraft;
            ann_custom_EntityTypesAir.reset();
            MemberName name_TransportAircraft = "TransportAircraft";
            CompleteMemberDetail detail_TransportAircraft = TypeObjectUtils::build_complete_member_detail(name_TransportAircraft, member_ann_builtin_TransportAircraft, ann_custom_EntityTypesAir);
            CompleteEnumeratedLiteral literal_TransportAircraft = TypeObjectUtils::build_complete_enumerated_literal(common_TransportAircraft, detail_TransportAircraft);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityTypesAir, literal_TransportAircraft);
        }
        {
            EnumeratedLiteralFlag flags_FighterAircraft = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_FighterAircraft = TypeObjectUtils::build_common_enumerated_literal(2, flags_FighterAircraft);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_FighterAircraft;
            ann_custom_EntityTypesAir.reset();
            MemberName name_FighterAircraft = "FighterAircraft";
            CompleteMemberDetail detail_FighterAircraft = TypeObjectUtils::build_complete_member_detail(name_FighterAircraft, member_ann_builtin_FighterAircraft, ann_custom_EntityTypesAir);
            CompleteEnumeratedLiteral literal_FighterAircraft = TypeObjectUtils::build_complete_enumerated_literal(common_FighterAircraft, detail_FighterAircraft);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityTypesAir, literal_FighterAircraft);
        }
        {
            EnumeratedLiteralFlag flags_Helicopter = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Helicopter = TypeObjectUtils::build_common_enumerated_literal(3, flags_Helicopter);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Helicopter;
            ann_custom_EntityTypesAir.reset();
            MemberName name_Helicopter = "Helicopter";
            CompleteMemberDetail detail_Helicopter = TypeObjectUtils::build_complete_member_detail(name_Helicopter, member_ann_builtin_Helicopter, ann_custom_EntityTypesAir);
            CompleteEnumeratedLiteral literal_Helicopter = TypeObjectUtils::build_complete_enumerated_literal(common_Helicopter, detail_Helicopter);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityTypesAir, literal_Helicopter);
        }
        {
            EnumeratedLiteralFlag flags_UAV = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_UAV = TypeObjectUtils::build_common_enumerated_literal(4, flags_UAV);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_UAV;
            ann_custom_EntityTypesAir.reset();
            MemberName name_UAV = "UAV";
            CompleteMemberDetail detail_UAV = TypeObjectUtils::build_complete_member_detail(name_UAV, member_ann_builtin_UAV, ann_custom_EntityTypesAir);
            CompleteEnumeratedLiteral literal_UAV = TypeObjectUtils::build_complete_enumerated_literal(common_UAV, detail_UAV);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityTypesAir, literal_UAV);
        }
        CompleteEnumeratedType enumerated_type_EntityTypesAir = TypeObjectUtils::build_complete_enumerated_type(enum_flags_EntityTypesAir, header_EntityTypesAir,
                literal_seq_EntityTypesAir);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_EntityTypesAir, type_name_EntityTypesAir.to_string(), type_ids_EntityTypesAir))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "EntityTypesAir already registered in TypeObjectRegistry for a different type.");
        }
    }
}void register_EntityTypesGround_type_identifier(
        TypeIdentifierPair& type_ids_EntityTypesGround)
{
    ReturnCode_t return_code_EntityTypesGround {eprosima::fastdds::dds::RETCODE_OK};
    return_code_EntityTypesGround =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "EntityTypesGround", type_ids_EntityTypesGround);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_EntityTypesGround)
    {
        EnumTypeFlag enum_flags_EntityTypesGround = 0;
        BitBound bit_bound_EntityTypesGround = 32;
        CommonEnumeratedHeader common_EntityTypesGround = TypeObjectUtils::build_common_enumerated_header(bit_bound_EntityTypesGround);
        QualifiedTypeName type_name_EntityTypesGround = "EntityTypesGround";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_EntityTypesGround;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_EntityTypesGround;
        CompleteTypeDetail detail_EntityTypesGround = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_EntityTypesGround, ann_custom_EntityTypesGround, type_name_EntityTypesGround.to_string());
        CompleteEnumeratedHeader header_EntityTypesGround = TypeObjectUtils::build_complete_enumerated_header(common_EntityTypesGround, detail_EntityTypesGround);
        CompleteEnumeratedLiteralSeq literal_seq_EntityTypesGround;
        {
            EnumeratedLiteralFlag flags_Generic = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Generic = TypeObjectUtils::build_common_enumerated_literal(0, flags_Generic);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Generic;
            ann_custom_EntityTypesGround.reset();
            MemberName name_Generic = "Generic";
            CompleteMemberDetail detail_Generic = TypeObjectUtils::build_complete_member_detail(name_Generic, member_ann_builtin_Generic, ann_custom_EntityTypesGround);
            CompleteEnumeratedLiteral literal_Generic = TypeObjectUtils::build_complete_enumerated_literal(common_Generic, detail_Generic);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityTypesGround, literal_Generic);
        }
        {
            EnumeratedLiteralFlag flags_TrafficManAvatar = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_TrafficManAvatar = TypeObjectUtils::build_common_enumerated_literal(1, flags_TrafficManAvatar);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_TrafficManAvatar;
            ann_custom_EntityTypesGround.reset();
            MemberName name_TrafficManAvatar = "TrafficManAvatar";
            CompleteMemberDetail detail_TrafficManAvatar = TypeObjectUtils::build_complete_member_detail(name_TrafficManAvatar, member_ann_builtin_TrafficManAvatar, ann_custom_EntityTypesGround);
            CompleteEnumeratedLiteral literal_TrafficManAvatar = TypeObjectUtils::build_complete_enumerated_literal(common_TrafficManAvatar, detail_TrafficManAvatar);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityTypesGround, literal_TrafficManAvatar);
        }
        CompleteEnumeratedType enumerated_type_EntityTypesGround = TypeObjectUtils::build_complete_enumerated_type(enum_flags_EntityTypesGround, header_EntityTypesGround,
                literal_seq_EntityTypesGround);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_EntityTypesGround, type_name_EntityTypesGround.to_string(), type_ids_EntityTypesGround))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "EntityTypesGround already registered in TypeObjectRegistry for a different type.");
        }
    }
}void register_EntityTypesNaval_type_identifier(
        TypeIdentifierPair& type_ids_EntityTypesNaval)
{
    ReturnCode_t return_code_EntityTypesNaval {eprosima::fastdds::dds::RETCODE_OK};
    return_code_EntityTypesNaval =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "EntityTypesNaval", type_ids_EntityTypesNaval);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_EntityTypesNaval)
    {
        EnumTypeFlag enum_flags_EntityTypesNaval = 0;
        BitBound bit_bound_EntityTypesNaval = 32;
        CommonEnumeratedHeader common_EntityTypesNaval = TypeObjectUtils::build_common_enumerated_header(bit_bound_EntityTypesNaval);
        QualifiedTypeName type_name_EntityTypesNaval = "EntityTypesNaval";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_EntityTypesNaval;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_EntityTypesNaval;
        CompleteTypeDetail detail_EntityTypesNaval = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_EntityTypesNaval, ann_custom_EntityTypesNaval, type_name_EntityTypesNaval.to_string());
        CompleteEnumeratedHeader header_EntityTypesNaval = TypeObjectUtils::build_complete_enumerated_header(common_EntityTypesNaval, detail_EntityTypesNaval);
        CompleteEnumeratedLiteralSeq literal_seq_EntityTypesNaval;
        {
            EnumeratedLiteralFlag flags_Generic = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Generic = TypeObjectUtils::build_common_enumerated_literal(1, flags_Generic);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Generic;
            ann_custom_EntityTypesNaval.reset();
            AppliedAnnotationSeq tmp_ann_custom_Generic;
            if (!tmp_ann_custom_Generic.empty())
            {
                ann_custom_EntityTypesNaval = tmp_ann_custom_Generic;
            }
            MemberName name_Generic = "Generic";
            CompleteMemberDetail detail_Generic = TypeObjectUtils::build_complete_member_detail(name_Generic, member_ann_builtin_Generic, ann_custom_EntityTypesNaval);
            CompleteEnumeratedLiteral literal_Generic = TypeObjectUtils::build_complete_enumerated_literal(common_Generic, detail_Generic);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityTypesNaval, literal_Generic);
        }
        {
            EnumeratedLiteralFlag flags_Complex = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Complex = TypeObjectUtils::build_common_enumerated_literal(1, flags_Complex);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Complex;
            ann_custom_EntityTypesNaval.reset();
            MemberName name_Complex = "Complex";
            CompleteMemberDetail detail_Complex = TypeObjectUtils::build_complete_member_detail(name_Complex, member_ann_builtin_Complex, ann_custom_EntityTypesNaval);
            CompleteEnumeratedLiteral literal_Complex = TypeObjectUtils::build_complete_enumerated_literal(common_Complex, detail_Complex);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityTypesNaval, literal_Complex);
        }
        CompleteEnumeratedType enumerated_type_EntityTypesNaval = TypeObjectUtils::build_complete_enumerated_type(enum_flags_EntityTypesNaval, header_EntityTypesNaval,
                literal_seq_EntityTypesNaval);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_EntityTypesNaval, type_name_EntityTypesNaval.to_string(), type_ids_EntityTypesNaval))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "EntityTypesNaval already registered in TypeObjectRegistry for a different type.");
        }
    }
}void register_EntityTypesNoMovingGround_type_identifier(
        TypeIdentifierPair& type_ids_EntityTypesNoMovingGround)
{
    ReturnCode_t return_code_EntityTypesNoMovingGround {eprosima::fastdds::dds::RETCODE_OK};
    return_code_EntityTypesNoMovingGround =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "EntityTypesNoMovingGround", type_ids_EntityTypesNoMovingGround);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_EntityTypesNoMovingGround)
    {
        EnumTypeFlag enum_flags_EntityTypesNoMovingGround = 0;
        BitBound bit_bound_EntityTypesNoMovingGround = 32;
        CommonEnumeratedHeader common_EntityTypesNoMovingGround = TypeObjectUtils::build_common_enumerated_header(bit_bound_EntityTypesNoMovingGround);
        QualifiedTypeName type_name_EntityTypesNoMovingGround = "EntityTypesNoMovingGround";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_EntityTypesNoMovingGround;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_EntityTypesNoMovingGround;
        CompleteTypeDetail detail_EntityTypesNoMovingGround = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_EntityTypesNoMovingGround, ann_custom_EntityTypesNoMovingGround, type_name_EntityTypesNoMovingGround.to_string());
        CompleteEnumeratedHeader header_EntityTypesNoMovingGround = TypeObjectUtils::build_complete_enumerated_header(common_EntityTypesNoMovingGround, detail_EntityTypesNoMovingGround);
        CompleteEnumeratedLiteralSeq literal_seq_EntityTypesNoMovingGround;
        {
            EnumeratedLiteralFlag flags_Generic = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Generic = TypeObjectUtils::build_common_enumerated_literal(1, flags_Generic);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Generic;
            ann_custom_EntityTypesNoMovingGround.reset();
            AppliedAnnotationSeq tmp_ann_custom_Generic;
            if (!tmp_ann_custom_Generic.empty())
            {
                ann_custom_EntityTypesNoMovingGround = tmp_ann_custom_Generic;
            }
            MemberName name_Generic = "Generic";
            CompleteMemberDetail detail_Generic = TypeObjectUtils::build_complete_member_detail(name_Generic, member_ann_builtin_Generic, ann_custom_EntityTypesNoMovingGround);
            CompleteEnumeratedLiteral literal_Generic = TypeObjectUtils::build_complete_enumerated_literal(common_Generic, detail_Generic);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityTypesNoMovingGround, literal_Generic);
        }
        CompleteEnumeratedType enumerated_type_EntityTypesNoMovingGround = TypeObjectUtils::build_complete_enumerated_type(enum_flags_EntityTypesNoMovingGround, header_EntityTypesNoMovingGround,
                literal_seq_EntityTypesNoMovingGround);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_EntityTypesNoMovingGround, type_name_EntityTypesNoMovingGround.to_string(), type_ids_EntityTypesNoMovingGround))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "EntityTypesNoMovingGround already registered in TypeObjectRegistry for a different type.");
        }
    }
}void register_EntityTypesHuman_type_identifier(
        TypeIdentifierPair& type_ids_EntityTypesHuman)
{
    ReturnCode_t return_code_EntityTypesHuman {eprosima::fastdds::dds::RETCODE_OK};
    return_code_EntityTypesHuman =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "EntityTypesHuman", type_ids_EntityTypesHuman);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_EntityTypesHuman)
    {
        EnumTypeFlag enum_flags_EntityTypesHuman = 0;
        BitBound bit_bound_EntityTypesHuman = 32;
        CommonEnumeratedHeader common_EntityTypesHuman = TypeObjectUtils::build_common_enumerated_header(bit_bound_EntityTypesHuman);
        QualifiedTypeName type_name_EntityTypesHuman = "EntityTypesHuman";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_EntityTypesHuman;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_EntityTypesHuman;
        CompleteTypeDetail detail_EntityTypesHuman = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_EntityTypesHuman, ann_custom_EntityTypesHuman, type_name_EntityTypesHuman.to_string());
        CompleteEnumeratedHeader header_EntityTypesHuman = TypeObjectUtils::build_complete_enumerated_header(common_EntityTypesHuman, detail_EntityTypesHuman);
        CompleteEnumeratedLiteralSeq literal_seq_EntityTypesHuman;
        {
            EnumeratedLiteralFlag flags_Generic = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Generic = TypeObjectUtils::build_common_enumerated_literal(1, flags_Generic);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Generic;
            ann_custom_EntityTypesHuman.reset();
            AppliedAnnotationSeq tmp_ann_custom_Generic;
            if (!tmp_ann_custom_Generic.empty())
            {
                ann_custom_EntityTypesHuman = tmp_ann_custom_Generic;
            }
            MemberName name_Generic = "Generic";
            CompleteMemberDetail detail_Generic = TypeObjectUtils::build_complete_member_detail(name_Generic, member_ann_builtin_Generic, ann_custom_EntityTypesHuman);
            CompleteEnumeratedLiteral literal_Generic = TypeObjectUtils::build_complete_enumerated_literal(common_Generic, detail_Generic);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityTypesHuman, literal_Generic);
        }
        {
            EnumeratedLiteralFlag flags_Sniper = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Sniper = TypeObjectUtils::build_common_enumerated_literal(1, flags_Sniper);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Sniper;
            ann_custom_EntityTypesHuman.reset();
            MemberName name_Sniper = "Sniper";
            CompleteMemberDetail detail_Sniper = TypeObjectUtils::build_complete_member_detail(name_Sniper, member_ann_builtin_Sniper, ann_custom_EntityTypesHuman);
            CompleteEnumeratedLiteral literal_Sniper = TypeObjectUtils::build_complete_enumerated_literal(common_Sniper, detail_Sniper);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityTypesHuman, literal_Sniper);
        }
        {
            EnumeratedLiteralFlag flags_TrafficManAvatar = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_TrafficManAvatar = TypeObjectUtils::build_common_enumerated_literal(2, flags_TrafficManAvatar);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_TrafficManAvatar;
            ann_custom_EntityTypesHuman.reset();
            MemberName name_TrafficManAvatar = "TrafficManAvatar";
            CompleteMemberDetail detail_TrafficManAvatar = TypeObjectUtils::build_complete_member_detail(name_TrafficManAvatar, member_ann_builtin_TrafficManAvatar, ann_custom_EntityTypesHuman);
            CompleteEnumeratedLiteral literal_TrafficManAvatar = TypeObjectUtils::build_complete_enumerated_literal(common_TrafficManAvatar, detail_TrafficManAvatar);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityTypesHuman, literal_TrafficManAvatar);
        }
        {
            EnumeratedLiteralFlag flags_Marshaller = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Marshaller = TypeObjectUtils::build_common_enumerated_literal(3, flags_Marshaller);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Marshaller;
            ann_custom_EntityTypesHuman.reset();
            MemberName name_Marshaller = "Marshaller";
            CompleteMemberDetail detail_Marshaller = TypeObjectUtils::build_complete_member_detail(name_Marshaller, member_ann_builtin_Marshaller, ann_custom_EntityTypesHuman);
            CompleteEnumeratedLiteral literal_Marshaller = TypeObjectUtils::build_complete_enumerated_literal(common_Marshaller, detail_Marshaller);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityTypesHuman, literal_Marshaller);
        }
        {
            EnumeratedLiteralFlag flags_Survivor = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Survivor = TypeObjectUtils::build_common_enumerated_literal(4, flags_Survivor);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Survivor;
            ann_custom_EntityTypesHuman.reset();
            MemberName name_Survivor = "Survivor";
            CompleteMemberDetail detail_Survivor = TypeObjectUtils::build_complete_member_detail(name_Survivor, member_ann_builtin_Survivor, ann_custom_EntityTypesHuman);
            CompleteEnumeratedLiteral literal_Survivor = TypeObjectUtils::build_complete_enumerated_literal(common_Survivor, detail_Survivor);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EntityTypesHuman, literal_Survivor);
        }
        CompleteEnumeratedType enumerated_type_EntityTypesHuman = TypeObjectUtils::build_complete_enumerated_type(enum_flags_EntityTypesHuman, header_EntityTypesHuman,
                literal_seq_EntityTypesHuman);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_EntityTypesHuman, type_name_EntityTypesHuman.to_string(), type_ids_EntityTypesHuman))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "EntityTypesHuman already registered in TypeObjectRegistry for a different type.");
        }
    }
}void register_DamageStatus_type_identifier(
        TypeIdentifierPair& type_ids_DamageStatus)
{
    ReturnCode_t return_code_DamageStatus {eprosima::fastdds::dds::RETCODE_OK};
    return_code_DamageStatus =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "DamageStatus", type_ids_DamageStatus);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_DamageStatus)
    {
        EnumTypeFlag enum_flags_DamageStatus = 0;
        BitBound bit_bound_DamageStatus = 32;
        CommonEnumeratedHeader common_DamageStatus = TypeObjectUtils::build_common_enumerated_header(bit_bound_DamageStatus);
        QualifiedTypeName type_name_DamageStatus = "DamageStatus";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_DamageStatus;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_DamageStatus;
        CompleteTypeDetail detail_DamageStatus = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_DamageStatus, ann_custom_DamageStatus, type_name_DamageStatus.to_string());
        CompleteEnumeratedHeader header_DamageStatus = TypeObjectUtils::build_complete_enumerated_header(common_DamageStatus, detail_DamageStatus);
        CompleteEnumeratedLiteralSeq literal_seq_DamageStatus;
        {
            EnumeratedLiteralFlag flags_None = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_None = TypeObjectUtils::build_common_enumerated_literal(0, flags_None);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_None;
            ann_custom_DamageStatus.reset();
            MemberName name_None = "None";
            CompleteMemberDetail detail_None = TypeObjectUtils::build_complete_member_detail(name_None, member_ann_builtin_None, ann_custom_DamageStatus);
            CompleteEnumeratedLiteral literal_None = TypeObjectUtils::build_complete_enumerated_literal(common_None, detail_None);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_DamageStatus, literal_None);
        }
        {
            EnumeratedLiteralFlag flags_Light = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Light = TypeObjectUtils::build_common_enumerated_literal(1, flags_Light);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Light;
            ann_custom_DamageStatus.reset();
            MemberName name_Light = "Light";
            CompleteMemberDetail detail_Light = TypeObjectUtils::build_complete_member_detail(name_Light, member_ann_builtin_Light, ann_custom_DamageStatus);
            CompleteEnumeratedLiteral literal_Light = TypeObjectUtils::build_complete_enumerated_literal(common_Light, detail_Light);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_DamageStatus, literal_Light);
        }
        {
            EnumeratedLiteralFlag flags_Severed = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Severed = TypeObjectUtils::build_common_enumerated_literal(2, flags_Severed);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Severed;
            ann_custom_DamageStatus.reset();
            MemberName name_Severed = "Severed";
            CompleteMemberDetail detail_Severed = TypeObjectUtils::build_complete_member_detail(name_Severed, member_ann_builtin_Severed, ann_custom_DamageStatus);
            CompleteEnumeratedLiteral literal_Severed = TypeObjectUtils::build_complete_enumerated_literal(common_Severed, detail_Severed);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_DamageStatus, literal_Severed);
        }
        {
            EnumeratedLiteralFlag flags_Destroyed = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Destroyed = TypeObjectUtils::build_common_enumerated_literal(3, flags_Destroyed);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Destroyed;
            ann_custom_DamageStatus.reset();
            MemberName name_Destroyed = "Destroyed";
            CompleteMemberDetail detail_Destroyed = TypeObjectUtils::build_complete_member_detail(name_Destroyed, member_ann_builtin_Destroyed, ann_custom_DamageStatus);
            CompleteEnumeratedLiteral literal_Destroyed = TypeObjectUtils::build_complete_enumerated_literal(common_Destroyed, detail_Destroyed);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_DamageStatus, literal_Destroyed);
        }
        CompleteEnumeratedType enumerated_type_DamageStatus = TypeObjectUtils::build_complete_enumerated_type(enum_flags_DamageStatus, header_DamageStatus,
                literal_seq_DamageStatus);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_DamageStatus, type_name_DamageStatus.to_string(), type_ids_DamageStatus))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "DamageStatus already registered in TypeObjectRegistry for a different type.");
        }
    }
}void register_ActivationMode_type_identifier(
        TypeIdentifierPair& type_ids_ActivationMode)
{
    ReturnCode_t return_code_ActivationMode {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ActivationMode =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "ActivationMode", type_ids_ActivationMode);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ActivationMode)
    {
        EnumTypeFlag enum_flags_ActivationMode = 0;
        BitBound bit_bound_ActivationMode = 32;
        CommonEnumeratedHeader common_ActivationMode = TypeObjectUtils::build_common_enumerated_header(bit_bound_ActivationMode);
        QualifiedTypeName type_name_ActivationMode = "ActivationMode";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ActivationMode;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ActivationMode;
        CompleteTypeDetail detail_ActivationMode = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ActivationMode, ann_custom_ActivationMode, type_name_ActivationMode.to_string());
        CompleteEnumeratedHeader header_ActivationMode = TypeObjectUtils::build_complete_enumerated_header(common_ActivationMode, detail_ActivationMode);
        CompleteEnumeratedLiteralSeq literal_seq_ActivationMode;
        {
            EnumeratedLiteralFlag flags_OnCreation = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_OnCreation = TypeObjectUtils::build_common_enumerated_literal(0, flags_OnCreation);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_OnCreation;
            ann_custom_ActivationMode.reset();
            AppliedAnnotationSeq tmp_ann_custom_OnCreation;
            if (!tmp_ann_custom_OnCreation.empty())
            {
                ann_custom_ActivationMode = tmp_ann_custom_OnCreation;
            }
            MemberName name_OnCreation = "OnCreation";
            CompleteMemberDetail detail_OnCreation = TypeObjectUtils::build_complete_member_detail(name_OnCreation, member_ann_builtin_OnCreation, ann_custom_ActivationMode);
            CompleteEnumeratedLiteral literal_OnCreation = TypeObjectUtils::build_complete_enumerated_literal(common_OnCreation, detail_OnCreation);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_ActivationMode, literal_OnCreation);
        }
        {
            EnumeratedLiteralFlag flags_SessionTime = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_SessionTime = TypeObjectUtils::build_common_enumerated_literal(1, flags_SessionTime);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_SessionTime;
            ann_custom_ActivationMode.reset();
            AppliedAnnotationSeq tmp_ann_custom_SessionTime;
            if (!tmp_ann_custom_SessionTime.empty())
            {
                ann_custom_ActivationMode = tmp_ann_custom_SessionTime;
            }
            MemberName name_SessionTime = "SessionTime";
            CompleteMemberDetail detail_SessionTime = TypeObjectUtils::build_complete_member_detail(name_SessionTime, member_ann_builtin_SessionTime, ann_custom_ActivationMode);
            CompleteEnumeratedLiteral literal_SessionTime = TypeObjectUtils::build_complete_enumerated_literal(common_SessionTime, detail_SessionTime);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_ActivationMode, literal_SessionTime);
        }
        {
            EnumeratedLiteralFlag flags_FlightTime = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_FlightTime = TypeObjectUtils::build_common_enumerated_literal(2, flags_FlightTime);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_FlightTime;
            ann_custom_ActivationMode.reset();
            AppliedAnnotationSeq tmp_ann_custom_FlightTime;
            if (!tmp_ann_custom_FlightTime.empty())
            {
                ann_custom_ActivationMode = tmp_ann_custom_FlightTime;
            }
            MemberName name_FlightTime = "FlightTime";
            CompleteMemberDetail detail_FlightTime = TypeObjectUtils::build_complete_member_detail(name_FlightTime, member_ann_builtin_FlightTime, ann_custom_ActivationMode);
            CompleteEnumeratedLiteral literal_FlightTime = TypeObjectUtils::build_complete_enumerated_literal(common_FlightTime, detail_FlightTime);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_ActivationMode, literal_FlightTime);
        }
        {
            EnumeratedLiteralFlag flags_MissionTime = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_MissionTime = TypeObjectUtils::build_common_enumerated_literal(3, flags_MissionTime);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MissionTime;
            ann_custom_ActivationMode.reset();
            AppliedAnnotationSeq tmp_ann_custom_MissionTime;
            if (!tmp_ann_custom_MissionTime.empty())
            {
                ann_custom_ActivationMode = tmp_ann_custom_MissionTime;
            }
            MemberName name_MissionTime = "MissionTime";
            CompleteMemberDetail detail_MissionTime = TypeObjectUtils::build_complete_member_detail(name_MissionTime, member_ann_builtin_MissionTime, ann_custom_ActivationMode);
            CompleteEnumeratedLiteral literal_MissionTime = TypeObjectUtils::build_complete_enumerated_literal(common_MissionTime, detail_MissionTime);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_ActivationMode, literal_MissionTime);
        }
        {
            EnumeratedLiteralFlag flags_Manual = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Manual = TypeObjectUtils::build_common_enumerated_literal(4, flags_Manual);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Manual;
            ann_custom_ActivationMode.reset();
            AppliedAnnotationSeq tmp_ann_custom_Manual;
            if (!tmp_ann_custom_Manual.empty())
            {
                ann_custom_ActivationMode = tmp_ann_custom_Manual;
            }
            MemberName name_Manual = "Manual";
            CompleteMemberDetail detail_Manual = TypeObjectUtils::build_complete_member_detail(name_Manual, member_ann_builtin_Manual, ann_custom_ActivationMode);
            CompleteEnumeratedLiteral literal_Manual = TypeObjectUtils::build_complete_enumerated_literal(common_Manual, detail_Manual);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_ActivationMode, literal_Manual);
        }
        CompleteEnumeratedType enumerated_type_ActivationMode = TypeObjectUtils::build_complete_enumerated_type(enum_flags_ActivationMode, header_ActivationMode,
                literal_seq_ActivationMode);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_ActivationMode, type_name_ActivationMode.to_string(), type_ids_ActivationMode))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "ActivationMode already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_EntityID_type_identifier(
        TypeIdentifierPair& type_ids_EntityID)
{

    ReturnCode_t return_code_EntityID {eprosima::fastdds::dds::RETCODE_OK};
    return_code_EntityID =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "EntityID", type_ids_EntityID);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_EntityID)
    {
        StructTypeFlag struct_flags_EntityID = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_EntityID = "EntityID";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_EntityID;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_EntityID;
        CompleteTypeDetail detail_EntityID = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_EntityID, ann_custom_EntityID, type_name_EntityID.to_string());
        CompleteStructHeader header_EntityID;
        header_EntityID = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_EntityID);
        CompleteStructMemberSeq member_seq_EntityID;
        {
            TypeIdentifierPair type_ids_id;
            ReturnCode_t return_code_id {eprosima::fastdds::dds::RETCODE_OK};
            return_code_id =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_id);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_id)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "id Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_id = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_id = 0x00000000;
            bool common_id_ec {false};
            CommonStructMember common_id {TypeObjectUtils::build_common_struct_member(member_id_id, member_flags_id, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_id, common_id_ec))};
            if (!common_id_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure id member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_id = "id";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_id;
            ann_custom_EntityID.reset();
            CompleteMemberDetail detail_id = TypeObjectUtils::build_complete_member_detail(name_id, member_ann_builtin_id, ann_custom_EntityID);
            CompleteStructMember member_id = TypeObjectUtils::build_complete_struct_member(common_id, detail_id);
            TypeObjectUtils::add_complete_struct_member(member_seq_EntityID, member_id);
        }
        {
            TypeIdentifierPair type_ids_creatorID;
            ReturnCode_t return_code_creatorID {eprosima::fastdds::dds::RETCODE_OK};
            return_code_creatorID =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_creatorID);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_creatorID)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "creatorID Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_creatorID = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_creatorID = 0x00000001;
            bool common_creatorID_ec {false};
            CommonStructMember common_creatorID {TypeObjectUtils::build_common_struct_member(member_id_creatorID, member_flags_creatorID, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_creatorID, common_creatorID_ec))};
            if (!common_creatorID_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure creatorID member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_creatorID = "creatorID";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_creatorID;
            ann_custom_EntityID.reset();
            CompleteMemberDetail detail_creatorID = TypeObjectUtils::build_complete_member_detail(name_creatorID, member_ann_builtin_creatorID, ann_custom_EntityID);
            CompleteStructMember member_creatorID = TypeObjectUtils::build_complete_struct_member(common_creatorID, detail_creatorID);
            TypeObjectUtils::add_complete_struct_member(member_seq_EntityID, member_creatorID);
        }
        {
            TypeIdentifierPair type_ids_entityName;
            ReturnCode_t return_code_entityName {eprosima::fastdds::dds::RETCODE_OK};
            return_code_entityName =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_char_20", type_ids_entityName);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_entityName)
            {
                return_code_entityName =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_char", type_ids_entityName);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_entityName)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_char_20_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_char_20 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_entityName, element_identifier_anonymous_array_char_20_ec))};
                if (!element_identifier_anonymous_array_char_20_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_char_20 = EK_COMPLETE;
                if (TK_NONE == type_ids_entityName.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_char_20 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_char_20 = 0;
                PlainCollectionHeader header_anonymous_array_char_20 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_char_20, element_flags_anonymous_array_char_20);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(20));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_char_20, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_char_20));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_char_20", type_ids_entityName))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_char_20 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_entityName = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_entityName = 0x00000002;
            bool common_entityName_ec {false};
            CommonStructMember common_entityName {TypeObjectUtils::build_common_struct_member(member_id_entityName, member_flags_entityName, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_entityName, common_entityName_ec))};
            if (!common_entityName_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure entityName member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_entityName = "entityName";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_entityName;
            ann_custom_EntityID.reset();
            CompleteMemberDetail detail_entityName = TypeObjectUtils::build_complete_member_detail(name_entityName, member_ann_builtin_entityName, ann_custom_EntityID);
            CompleteStructMember member_entityName = TypeObjectUtils::build_complete_struct_member(common_entityName, detail_entityName);
            TypeObjectUtils::add_complete_struct_member(member_seq_EntityID, member_entityName);
        }
        {
            TypeIdentifierPair type_ids_modelName;
            ReturnCode_t return_code_modelName {eprosima::fastdds::dds::RETCODE_OK};
            return_code_modelName =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_char_20", type_ids_modelName);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_modelName)
            {
                return_code_modelName =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_char", type_ids_modelName);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_modelName)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_char_20_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_char_20 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_modelName, element_identifier_anonymous_array_char_20_ec))};
                if (!element_identifier_anonymous_array_char_20_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_char_20 = EK_COMPLETE;
                if (TK_NONE == type_ids_modelName.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_char_20 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_char_20 = 0;
                PlainCollectionHeader header_anonymous_array_char_20 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_char_20, element_flags_anonymous_array_char_20);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(20));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_char_20, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_char_20));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_char_20", type_ids_modelName))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_char_20 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_modelName = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_modelName = 0x00000003;
            bool common_modelName_ec {false};
            CommonStructMember common_modelName {TypeObjectUtils::build_common_struct_member(member_id_modelName, member_flags_modelName, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_modelName, common_modelName_ec))};
            if (!common_modelName_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure modelName member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_modelName = "modelName";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_modelName;
            ann_custom_EntityID.reset();
            CompleteMemberDetail detail_modelName = TypeObjectUtils::build_complete_member_detail(name_modelName, member_ann_builtin_modelName, ann_custom_EntityID);
            CompleteStructMember member_modelName = TypeObjectUtils::build_complete_struct_member(common_modelName, detail_modelName);
            TypeObjectUtils::add_complete_struct_member(member_seq_EntityID, member_modelName);
        }
        {
            TypeIdentifierPair type_ids_visualID;
            ReturnCode_t return_code_visualID {eprosima::fastdds::dds::RETCODE_OK};
            return_code_visualID =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_visualID);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_visualID)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "visualID Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_visualID = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_visualID = 0x00000004;
            bool common_visualID_ec {false};
            CommonStructMember common_visualID {TypeObjectUtils::build_common_struct_member(member_id_visualID, member_flags_visualID, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_visualID, common_visualID_ec))};
            if (!common_visualID_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure visualID member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_visualID = "visualID";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_visualID;
            ann_custom_EntityID.reset();
            CompleteMemberDetail detail_visualID = TypeObjectUtils::build_complete_member_detail(name_visualID, member_ann_builtin_visualID, ann_custom_EntityID);
            CompleteStructMember member_visualID = TypeObjectUtils::build_complete_struct_member(common_visualID, detail_visualID);
            TypeObjectUtils::add_complete_struct_member(member_seq_EntityID, member_visualID);
        }
        {
            TypeIdentifierPair type_ids_visualModel;
            ReturnCode_t return_code_visualModel {eprosima::fastdds::dds::RETCODE_OK};
            return_code_visualModel =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_visualModel);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_visualModel)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "visualModel Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_visualModel = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_visualModel = 0x00000005;
            bool common_visualModel_ec {false};
            CommonStructMember common_visualModel {TypeObjectUtils::build_common_struct_member(member_id_visualModel, member_flags_visualModel, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_visualModel, common_visualModel_ec))};
            if (!common_visualModel_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure visualModel member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_visualModel = "visualModel";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_visualModel;
            ann_custom_EntityID.reset();
            CompleteMemberDetail detail_visualModel = TypeObjectUtils::build_complete_member_detail(name_visualModel, member_ann_builtin_visualModel, ann_custom_EntityID);
            CompleteStructMember member_visualModel = TypeObjectUtils::build_complete_struct_member(common_visualModel, detail_visualModel);
            TypeObjectUtils::add_complete_struct_member(member_seq_EntityID, member_visualModel);
        }
        {
            TypeIdentifierPair type_ids_visualDetail;
            ReturnCode_t return_code_visualDetail {eprosima::fastdds::dds::RETCODE_OK};
            return_code_visualDetail =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_visualDetail);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_visualDetail)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "visualDetail Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_visualDetail = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_visualDetail = 0x00000006;
            bool common_visualDetail_ec {false};
            CommonStructMember common_visualDetail {TypeObjectUtils::build_common_struct_member(member_id_visualDetail, member_flags_visualDetail, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_visualDetail, common_visualDetail_ec))};
            if (!common_visualDetail_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure visualDetail member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_visualDetail = "visualDetail";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_visualDetail;
            ann_custom_EntityID.reset();
            CompleteMemberDetail detail_visualDetail = TypeObjectUtils::build_complete_member_detail(name_visualDetail, member_ann_builtin_visualDetail, ann_custom_EntityID);
            CompleteStructMember member_visualDetail = TypeObjectUtils::build_complete_struct_member(common_visualDetail, detail_visualDetail);
            TypeObjectUtils::add_complete_struct_member(member_seq_EntityID, member_visualDetail);
        }
        {
            TypeIdentifierPair type_ids_active;
            ReturnCode_t return_code_active {eprosima::fastdds::dds::RETCODE_OK};
            return_code_active =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_active);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_active)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "active Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_active = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_active = 0x00000007;
            bool common_active_ec {false};
            CommonStructMember common_active {TypeObjectUtils::build_common_struct_member(member_id_active, member_flags_active, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_active, common_active_ec))};
            if (!common_active_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure active member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_active = "active";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_active;
            ann_custom_EntityID.reset();
            CompleteMemberDetail detail_active = TypeObjectUtils::build_complete_member_detail(name_active, member_ann_builtin_active, ann_custom_EntityID);
            CompleteStructMember member_active = TypeObjectUtils::build_complete_struct_member(common_active, detail_active);
            TypeObjectUtils::add_complete_struct_member(member_seq_EntityID, member_active);
        }
        {
            TypeIdentifierPair type_ids_damageStatus;
            ReturnCode_t return_code_damageStatus {eprosima::fastdds::dds::RETCODE_OK};
            return_code_damageStatus =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "DamageStatus", type_ids_damageStatus);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_damageStatus)
            {
            ::register_DamageStatus_type_identifier(type_ids_damageStatus);
            }
            StructMemberFlag member_flags_damageStatus = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_damageStatus = 0x00000008;
            bool common_damageStatus_ec {false};
            CommonStructMember common_damageStatus {TypeObjectUtils::build_common_struct_member(member_id_damageStatus, member_flags_damageStatus, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_damageStatus, common_damageStatus_ec))};
            if (!common_damageStatus_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure damageStatus member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_damageStatus = "damageStatus";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_damageStatus;
            ann_custom_EntityID.reset();
            CompleteMemberDetail detail_damageStatus = TypeObjectUtils::build_complete_member_detail(name_damageStatus, member_ann_builtin_damageStatus, ann_custom_EntityID);
            CompleteStructMember member_damageStatus = TypeObjectUtils::build_complete_struct_member(common_damageStatus, detail_damageStatus);
            TypeObjectUtils::add_complete_struct_member(member_seq_EntityID, member_damageStatus);
        }
        {
            TypeIdentifierPair type_ids_activationMode;
            ReturnCode_t return_code_activationMode {eprosima::fastdds::dds::RETCODE_OK};
            return_code_activationMode =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "ActivationMode", type_ids_activationMode);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_activationMode)
            {
            ::register_ActivationMode_type_identifier(type_ids_activationMode);
            }
            StructMemberFlag member_flags_activationMode = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_activationMode = 0x00000009;
            bool common_activationMode_ec {false};
            CommonStructMember common_activationMode {TypeObjectUtils::build_common_struct_member(member_id_activationMode, member_flags_activationMode, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_activationMode, common_activationMode_ec))};
            if (!common_activationMode_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure activationMode member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_activationMode = "activationMode";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_activationMode;
            ann_custom_EntityID.reset();
            CompleteMemberDetail detail_activationMode = TypeObjectUtils::build_complete_member_detail(name_activationMode, member_ann_builtin_activationMode, ann_custom_EntityID);
            CompleteStructMember member_activationMode = TypeObjectUtils::build_complete_struct_member(common_activationMode, detail_activationMode);
            TypeObjectUtils::add_complete_struct_member(member_seq_EntityID, member_activationMode);
        }
        {
            TypeIdentifierPair type_ids_delayedActivationTime;
            ReturnCode_t return_code_delayedActivationTime {eprosima::fastdds::dds::RETCODE_OK};
            return_code_delayedActivationTime =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_delayedActivationTime);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_delayedActivationTime)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "delayedActivationTime Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_delayedActivationTime = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_delayedActivationTime = 0x0000000a;
            bool common_delayedActivationTime_ec {false};
            CommonStructMember common_delayedActivationTime {TypeObjectUtils::build_common_struct_member(member_id_delayedActivationTime, member_flags_delayedActivationTime, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_delayedActivationTime, common_delayedActivationTime_ec))};
            if (!common_delayedActivationTime_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure delayedActivationTime member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_delayedActivationTime = "delayedActivationTime";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_delayedActivationTime;
            ann_custom_EntityID.reset();
            CompleteMemberDetail detail_delayedActivationTime = TypeObjectUtils::build_complete_member_detail(name_delayedActivationTime, member_ann_builtin_delayedActivationTime, ann_custom_EntityID);
            CompleteStructMember member_delayedActivationTime = TypeObjectUtils::build_complete_struct_member(common_delayedActivationTime, detail_delayedActivationTime);
            TypeObjectUtils::add_complete_struct_member(member_seq_EntityID, member_delayedActivationTime);
        }
        {
            TypeIdentifierPair type_ids_manned;
            ReturnCode_t return_code_manned {eprosima::fastdds::dds::RETCODE_OK};
            return_code_manned =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_manned);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_manned)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "manned Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_manned = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_manned = 0x0000000b;
            bool common_manned_ec {false};
            CommonStructMember common_manned {TypeObjectUtils::build_common_struct_member(member_id_manned, member_flags_manned, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_manned, common_manned_ec))};
            if (!common_manned_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure manned member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_manned = "manned";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_manned;
            ann_custom_EntityID.reset();
            CompleteMemberDetail detail_manned = TypeObjectUtils::build_complete_member_detail(name_manned, member_ann_builtin_manned, ann_custom_EntityID);
            CompleteStructMember member_manned = TypeObjectUtils::build_complete_struct_member(common_manned, detail_manned);
            TypeObjectUtils::add_complete_struct_member(member_seq_EntityID, member_manned);
        }
        {
            TypeIdentifierPair type_ids_remote;
            ReturnCode_t return_code_remote {eprosima::fastdds::dds::RETCODE_OK};
            return_code_remote =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_remote);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_remote)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "remote Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_remote = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_remote = 0x0000000c;
            bool common_remote_ec {false};
            CommonStructMember common_remote {TypeObjectUtils::build_common_struct_member(member_id_remote, member_flags_remote, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_remote, common_remote_ec))};
            if (!common_remote_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure remote member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_remote = "remote";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_remote;
            ann_custom_EntityID.reset();
            CompleteMemberDetail detail_remote = TypeObjectUtils::build_complete_member_detail(name_remote, member_ann_builtin_remote, ann_custom_EntityID);
            CompleteStructMember member_remote = TypeObjectUtils::build_complete_struct_member(common_remote, detail_remote);
            TypeObjectUtils::add_complete_struct_member(member_seq_EntityID, member_remote);
        }
        {
            TypeIdentifierPair type_ids_entityClass;
            ReturnCode_t return_code_entityClass {eprosima::fastdds::dds::RETCODE_OK};
            return_code_entityClass =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "EntityClass", type_ids_entityClass);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_entityClass)
            {
            ::register_EntityClass_type_identifier(type_ids_entityClass);
            }
            StructMemberFlag member_flags_entityClass = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_entityClass = 0x0000000d;
            bool common_entityClass_ec {false};
            CommonStructMember common_entityClass {TypeObjectUtils::build_common_struct_member(member_id_entityClass, member_flags_entityClass, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_entityClass, common_entityClass_ec))};
            if (!common_entityClass_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure entityClass member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_entityClass = "entityClass";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_entityClass;
            ann_custom_EntityID.reset();
            CompleteMemberDetail detail_entityClass = TypeObjectUtils::build_complete_member_detail(name_entityClass, member_ann_builtin_entityClass, ann_custom_EntityID);
            CompleteStructMember member_entityClass = TypeObjectUtils::build_complete_struct_member(common_entityClass, detail_entityClass);
            TypeObjectUtils::add_complete_struct_member(member_seq_EntityID, member_entityClass);
        }
        {
            TypeIdentifierPair type_ids_entityType;
            ReturnCode_t return_code_entityType {eprosima::fastdds::dds::RETCODE_OK};
            return_code_entityType =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_entityType);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_entityType)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "entityType Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_entityType = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_entityType = 0x0000000e;
            bool common_entityType_ec {false};
            CommonStructMember common_entityType {TypeObjectUtils::build_common_struct_member(member_id_entityType, member_flags_entityType, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_entityType, common_entityType_ec))};
            if (!common_entityType_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure entityType member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_entityType = "entityType";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_entityType;
            ann_custom_EntityID.reset();
            CompleteMemberDetail detail_entityType = TypeObjectUtils::build_complete_member_detail(name_entityType, member_ann_builtin_entityType, ann_custom_EntityID);
            CompleteStructMember member_entityType = TypeObjectUtils::build_complete_struct_member(common_entityType, detail_entityType);
            TypeObjectUtils::add_complete_struct_member(member_seq_EntityID, member_entityType);
        }
        {
            TypeIdentifierPair type_ids_side;
            ReturnCode_t return_code_side {eprosima::fastdds::dds::RETCODE_OK};
            return_code_side =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_side);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_side)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "side Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_side = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_side = 0x0000000f;
            bool common_side_ec {false};
            CommonStructMember common_side {TypeObjectUtils::build_common_struct_member(member_id_side, member_flags_side, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_side, common_side_ec))};
            if (!common_side_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure side member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_side = "side";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_side;
            ann_custom_EntityID.reset();
            CompleteMemberDetail detail_side = TypeObjectUtils::build_complete_member_detail(name_side, member_ann_builtin_side, ann_custom_EntityID);
            CompleteStructMember member_side = TypeObjectUtils::build_complete_struct_member(common_side, detail_side);
            TypeObjectUtils::add_complete_struct_member(member_seq_EntityID, member_side);
        }
        {
            TypeIdentifierPair type_ids_weight;
            ReturnCode_t return_code_weight {eprosima::fastdds::dds::RETCODE_OK};
            return_code_weight =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_weight);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_weight)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "weight Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_weight = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_weight = 0x00000010;
            bool common_weight_ec {false};
            CommonStructMember common_weight {TypeObjectUtils::build_common_struct_member(member_id_weight, member_flags_weight, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_weight, common_weight_ec))};
            if (!common_weight_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure weight member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_weight = "weight";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_weight;
            ann_custom_EntityID.reset();
            CompleteMemberDetail detail_weight = TypeObjectUtils::build_complete_member_detail(name_weight, member_ann_builtin_weight, ann_custom_EntityID);
            CompleteStructMember member_weight = TypeObjectUtils::build_complete_struct_member(common_weight, detail_weight);
            TypeObjectUtils::add_complete_struct_member(member_seq_EntityID, member_weight);
        }
        CompleteStructType struct_type_EntityID = TypeObjectUtils::build_complete_struct_type(struct_flags_EntityID, header_EntityID, member_seq_EntityID);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_EntityID, type_name_EntityID.to_string(), type_ids_EntityID))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "EntityID already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Target_type_identifier(
        TypeIdentifierPair& type_ids_Target)
{

    ReturnCode_t return_code_Target {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Target =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "Target", type_ids_Target);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Target)
    {
        StructTypeFlag struct_flags_Target = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Target = "Target";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Target;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Target;
        CompleteTypeDetail detail_Target = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Target, ann_custom_Target, type_name_Target.to_string());
        CompleteStructHeader header_Target;
        header_Target = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Target);
        CompleteStructMemberSeq member_seq_Target;
        {
            TypeIdentifierPair type_ids_entity_id;
            ReturnCode_t return_code_entity_id {eprosima::fastdds::dds::RETCODE_OK};
            return_code_entity_id =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_entity_id);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_entity_id)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "entity_id Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_entity_id = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_entity_id = 0x00000000;
            bool common_entity_id_ec {false};
            CommonStructMember common_entity_id {TypeObjectUtils::build_common_struct_member(member_id_entity_id, member_flags_entity_id, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_entity_id, common_entity_id_ec))};
            if (!common_entity_id_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure entity_id member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_entity_id = "entity_id";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_entity_id;
            ann_custom_Target.reset();
            CompleteMemberDetail detail_entity_id = TypeObjectUtils::build_complete_member_detail(name_entity_id, member_ann_builtin_entity_id, ann_custom_Target);
            CompleteStructMember member_entity_id = TypeObjectUtils::build_complete_struct_member(common_entity_id, detail_entity_id);
            TypeObjectUtils::add_complete_struct_member(member_seq_Target, member_entity_id);
        }
        CompleteStructType struct_type_Target = TypeObjectUtils::build_complete_struct_type(struct_flags_Target, header_Target, member_seq_Target);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Target, type_name_Target.to_string(), type_ids_Target))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Target already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Position_type_identifier(
        TypeIdentifierPair& type_ids_Position)
{

    ReturnCode_t return_code_Position {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Position =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "Position", type_ids_Position);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Position)
    {
        StructTypeFlag struct_flags_Position = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Position = "Position";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Position;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Position;
        CompleteTypeDetail detail_Position = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Position, ann_custom_Position, type_name_Position.to_string());
        CompleteStructHeader header_Position;
        header_Position = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Position);
        CompleteStructMemberSeq member_seq_Position;
        {
            TypeIdentifierPair type_ids_latitude;
            ReturnCode_t return_code_latitude {eprosima::fastdds::dds::RETCODE_OK};
            return_code_latitude =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_latitude);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_latitude)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "latitude Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_latitude = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_latitude = 0x00000000;
            bool common_latitude_ec {false};
            CommonStructMember common_latitude {TypeObjectUtils::build_common_struct_member(member_id_latitude, member_flags_latitude, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_latitude, common_latitude_ec))};
            if (!common_latitude_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure latitude member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_latitude = "latitude";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_latitude;
            ann_custom_Position.reset();
            CompleteMemberDetail detail_latitude = TypeObjectUtils::build_complete_member_detail(name_latitude, member_ann_builtin_latitude, ann_custom_Position);
            CompleteStructMember member_latitude = TypeObjectUtils::build_complete_struct_member(common_latitude, detail_latitude);
            TypeObjectUtils::add_complete_struct_member(member_seq_Position, member_latitude);
        }
        {
            TypeIdentifierPair type_ids_longitude;
            ReturnCode_t return_code_longitude {eprosima::fastdds::dds::RETCODE_OK};
            return_code_longitude =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_longitude);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_longitude)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "longitude Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_longitude = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_longitude = 0x00000001;
            bool common_longitude_ec {false};
            CommonStructMember common_longitude {TypeObjectUtils::build_common_struct_member(member_id_longitude, member_flags_longitude, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_longitude, common_longitude_ec))};
            if (!common_longitude_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure longitude member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_longitude = "longitude";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_longitude;
            ann_custom_Position.reset();
            CompleteMemberDetail detail_longitude = TypeObjectUtils::build_complete_member_detail(name_longitude, member_ann_builtin_longitude, ann_custom_Position);
            CompleteStructMember member_longitude = TypeObjectUtils::build_complete_struct_member(common_longitude, detail_longitude);
            TypeObjectUtils::add_complete_struct_member(member_seq_Position, member_longitude);
        }
        {
            TypeIdentifierPair type_ids_altitude;
            ReturnCode_t return_code_altitude {eprosima::fastdds::dds::RETCODE_OK};
            return_code_altitude =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_altitude);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_altitude)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "altitude Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_altitude = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_altitude = 0x00000002;
            bool common_altitude_ec {false};
            CommonStructMember common_altitude {TypeObjectUtils::build_common_struct_member(member_id_altitude, member_flags_altitude, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_altitude, common_altitude_ec))};
            if (!common_altitude_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure altitude member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_altitude = "altitude";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_altitude;
            ann_custom_Position.reset();
            CompleteMemberDetail detail_altitude = TypeObjectUtils::build_complete_member_detail(name_altitude, member_ann_builtin_altitude, ann_custom_Position);
            CompleteStructMember member_altitude = TypeObjectUtils::build_complete_struct_member(common_altitude, detail_altitude);
            TypeObjectUtils::add_complete_struct_member(member_seq_Position, member_altitude);
        }
        {
            TypeIdentifierPair type_ids_altitudeAGL;
            ReturnCode_t return_code_altitudeAGL {eprosima::fastdds::dds::RETCODE_OK};
            return_code_altitudeAGL =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_altitudeAGL);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_altitudeAGL)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "altitudeAGL Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_altitudeAGL = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_altitudeAGL = 0x00000003;
            bool common_altitudeAGL_ec {false};
            CommonStructMember common_altitudeAGL {TypeObjectUtils::build_common_struct_member(member_id_altitudeAGL, member_flags_altitudeAGL, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_altitudeAGL, common_altitudeAGL_ec))};
            if (!common_altitudeAGL_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure altitudeAGL member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_altitudeAGL = "altitudeAGL";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_altitudeAGL;
            ann_custom_Position.reset();
            CompleteMemberDetail detail_altitudeAGL = TypeObjectUtils::build_complete_member_detail(name_altitudeAGL, member_ann_builtin_altitudeAGL, ann_custom_Position);
            CompleteStructMember member_altitudeAGL = TypeObjectUtils::build_complete_struct_member(common_altitudeAGL, detail_altitudeAGL);
            TypeObjectUtils::add_complete_struct_member(member_seq_Position, member_altitudeAGL);
        }
        {
            TypeIdentifierPair type_ids_altitude_target;
            ReturnCode_t return_code_altitude_target {eprosima::fastdds::dds::RETCODE_OK};
            return_code_altitude_target =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_altitude_target);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_altitude_target)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "altitude_target Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_altitude_target = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_altitude_target = 0x00000004;
            bool common_altitude_target_ec {false};
            CommonStructMember common_altitude_target {TypeObjectUtils::build_common_struct_member(member_id_altitude_target, member_flags_altitude_target, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_altitude_target, common_altitude_target_ec))};
            if (!common_altitude_target_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure altitude_target member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_altitude_target = "altitude_target";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_altitude_target;
            ann_custom_Position.reset();
            CompleteMemberDetail detail_altitude_target = TypeObjectUtils::build_complete_member_detail(name_altitude_target, member_ann_builtin_altitude_target, ann_custom_Position);
            CompleteStructMember member_altitude_target = TypeObjectUtils::build_complete_struct_member(common_altitude_target, detail_altitude_target);
            TypeObjectUtils::add_complete_struct_member(member_seq_Position, member_altitude_target);
        }
        CompleteStructType struct_type_Position = TypeObjectUtils::build_complete_struct_type(struct_flags_Position, header_Position, member_seq_Position);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Position, type_name_Position.to_string(), type_ids_Position))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Position already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Attitude_type_identifier(
        TypeIdentifierPair& type_ids_Attitude)
{

    ReturnCode_t return_code_Attitude {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Attitude =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "Attitude", type_ids_Attitude);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Attitude)
    {
        StructTypeFlag struct_flags_Attitude = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Attitude = "Attitude";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Attitude;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Attitude;
        CompleteTypeDetail detail_Attitude = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Attitude, ann_custom_Attitude, type_name_Attitude.to_string());
        CompleteStructHeader header_Attitude;
        header_Attitude = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Attitude);
        CompleteStructMemberSeq member_seq_Attitude;
        {
            TypeIdentifierPair type_ids_pitch;
            ReturnCode_t return_code_pitch {eprosima::fastdds::dds::RETCODE_OK};
            return_code_pitch =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_pitch);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_pitch)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "pitch Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_pitch = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_pitch = 0x00000000;
            bool common_pitch_ec {false};
            CommonStructMember common_pitch {TypeObjectUtils::build_common_struct_member(member_id_pitch, member_flags_pitch, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_pitch, common_pitch_ec))};
            if (!common_pitch_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure pitch member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_pitch = "pitch";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_pitch;
            ann_custom_Attitude.reset();
            CompleteMemberDetail detail_pitch = TypeObjectUtils::build_complete_member_detail(name_pitch, member_ann_builtin_pitch, ann_custom_Attitude);
            CompleteStructMember member_pitch = TypeObjectUtils::build_complete_struct_member(common_pitch, detail_pitch);
            TypeObjectUtils::add_complete_struct_member(member_seq_Attitude, member_pitch);
        }
        {
            TypeIdentifierPair type_ids_yaw;
            ReturnCode_t return_code_yaw {eprosima::fastdds::dds::RETCODE_OK};
            return_code_yaw =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_yaw);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_yaw)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "yaw Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_yaw = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_yaw = 0x00000001;
            bool common_yaw_ec {false};
            CommonStructMember common_yaw {TypeObjectUtils::build_common_struct_member(member_id_yaw, member_flags_yaw, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_yaw, common_yaw_ec))};
            if (!common_yaw_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure yaw member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_yaw = "yaw";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_yaw;
            ann_custom_Attitude.reset();
            CompleteMemberDetail detail_yaw = TypeObjectUtils::build_complete_member_detail(name_yaw, member_ann_builtin_yaw, ann_custom_Attitude);
            CompleteStructMember member_yaw = TypeObjectUtils::build_complete_struct_member(common_yaw, detail_yaw);
            TypeObjectUtils::add_complete_struct_member(member_seq_Attitude, member_yaw);
        }
        {
            TypeIdentifierPair type_ids_roll;
            ReturnCode_t return_code_roll {eprosima::fastdds::dds::RETCODE_OK};
            return_code_roll =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_roll);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_roll)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "roll Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_roll = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_roll = 0x00000002;
            bool common_roll_ec {false};
            CommonStructMember common_roll {TypeObjectUtils::build_common_struct_member(member_id_roll, member_flags_roll, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_roll, common_roll_ec))};
            if (!common_roll_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure roll member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_roll = "roll";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_roll;
            ann_custom_Attitude.reset();
            CompleteMemberDetail detail_roll = TypeObjectUtils::build_complete_member_detail(name_roll, member_ann_builtin_roll, ann_custom_Attitude);
            CompleteStructMember member_roll = TypeObjectUtils::build_complete_struct_member(common_roll, detail_roll);
            TypeObjectUtils::add_complete_struct_member(member_seq_Attitude, member_roll);
        }
        CompleteStructType struct_type_Attitude = TypeObjectUtils::build_complete_struct_type(struct_flags_Attitude, header_Attitude, member_seq_Attitude);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Attitude, type_name_Attitude.to_string(), type_ids_Attitude))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Attitude already registered in TypeObjectRegistry for a different type.");
        }
    }
}void register_MovementTypesAir_type_identifier(
        TypeIdentifierPair& type_ids_MovementTypesAir)
{
    ReturnCode_t return_code_MovementTypesAir {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MovementTypesAir =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MovementTypesAir", type_ids_MovementTypesAir);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MovementTypesAir)
    {
        EnumTypeFlag enum_flags_MovementTypesAir = 0;
        BitBound bit_bound_MovementTypesAir = 32;
        CommonEnumeratedHeader common_MovementTypesAir = TypeObjectUtils::build_common_enumerated_header(bit_bound_MovementTypesAir);
        QualifiedTypeName type_name_MovementTypesAir = "MovementTypesAir";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MovementTypesAir;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MovementTypesAir;
        CompleteTypeDetail detail_MovementTypesAir = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MovementTypesAir, ann_custom_MovementTypesAir, type_name_MovementTypesAir.to_string());
        CompleteEnumeratedHeader header_MovementTypesAir = TypeObjectUtils::build_complete_enumerated_header(common_MovementTypesAir, detail_MovementTypesAir);
        CompleteEnumeratedLiteralSeq literal_seq_MovementTypesAir;
        {
            EnumeratedLiteralFlag flags_Rectilinear = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Rectilinear = TypeObjectUtils::build_common_enumerated_literal(0, flags_Rectilinear);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Rectilinear;
            ann_custom_MovementTypesAir.reset();
            MemberName name_Rectilinear = "Rectilinear";
            CompleteMemberDetail detail_Rectilinear = TypeObjectUtils::build_complete_member_detail(name_Rectilinear, member_ann_builtin_Rectilinear, ann_custom_MovementTypesAir);
            CompleteEnumeratedLiteral literal_Rectilinear = TypeObjectUtils::build_complete_enumerated_literal(common_Rectilinear, detail_Rectilinear);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MovementTypesAir, literal_Rectilinear);
        }
        {
            EnumeratedLiteralFlag flags_Mission = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Mission = TypeObjectUtils::build_common_enumerated_literal(1, flags_Mission);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Mission;
            ann_custom_MovementTypesAir.reset();
            MemberName name_Mission = "Mission";
            CompleteMemberDetail detail_Mission = TypeObjectUtils::build_complete_member_detail(name_Mission, member_ann_builtin_Mission, ann_custom_MovementTypesAir);
            CompleteEnumeratedLiteral literal_Mission = TypeObjectUtils::build_complete_enumerated_literal(common_Mission, detail_Mission);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MovementTypesAir, literal_Mission);
        }
        {
            EnumeratedLiteralFlag flags_Roleplay = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_Roleplay = TypeObjectUtils::build_common_enumerated_literal(2, flags_Roleplay);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Roleplay;
            ann_custom_MovementTypesAir.reset();
            MemberName name_Roleplay = "Roleplay";
            CompleteMemberDetail detail_Roleplay = TypeObjectUtils::build_complete_member_detail(name_Roleplay, member_ann_builtin_Roleplay, ann_custom_MovementTypesAir);
            CompleteEnumeratedLiteral literal_Roleplay = TypeObjectUtils::build_complete_enumerated_literal(common_Roleplay, detail_Roleplay);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MovementTypesAir, literal_Roleplay);
        }
        CompleteEnumeratedType enumerated_type_MovementTypesAir = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MovementTypesAir, header_MovementTypesAir,
                literal_seq_MovementTypesAir);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MovementTypesAir, type_name_MovementTypesAir.to_string(), type_ids_MovementTypesAir))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "MovementTypesAir already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MovementAirEntity_type_identifier(
        TypeIdentifierPair& type_ids_MovementAirEntity)
{

    ReturnCode_t return_code_MovementAirEntity {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MovementAirEntity =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MovementAirEntity", type_ids_MovementAirEntity);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MovementAirEntity)
    {
        StructTypeFlag struct_flags_MovementAirEntity = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MovementAirEntity = "MovementAirEntity";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MovementAirEntity;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MovementAirEntity;
        CompleteTypeDetail detail_MovementAirEntity = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MovementAirEntity, ann_custom_MovementAirEntity, type_name_MovementAirEntity.to_string());
        CompleteStructHeader header_MovementAirEntity;
        header_MovementAirEntity = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MovementAirEntity);
        CompleteStructMemberSeq member_seq_MovementAirEntity;
        {
            TypeIdentifierPair type_ids_movementMode;
            ReturnCode_t return_code_movementMode {eprosima::fastdds::dds::RETCODE_OK};
            return_code_movementMode =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MovementTypesAir", type_ids_movementMode);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_movementMode)
            {
            ::register_MovementTypesAir_type_identifier(type_ids_movementMode);
            }
            StructMemberFlag member_flags_movementMode = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_movementMode = 0x00000000;
            bool common_movementMode_ec {false};
            CommonStructMember common_movementMode {TypeObjectUtils::build_common_struct_member(member_id_movementMode, member_flags_movementMode, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_movementMode, common_movementMode_ec))};
            if (!common_movementMode_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure movementMode member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_movementMode = "movementMode";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_movementMode;
            ann_custom_MovementAirEntity.reset();
            CompleteMemberDetail detail_movementMode = TypeObjectUtils::build_complete_member_detail(name_movementMode, member_ann_builtin_movementMode, ann_custom_MovementAirEntity);
            CompleteStructMember member_movementMode = TypeObjectUtils::build_complete_struct_member(common_movementMode, detail_movementMode);
            TypeObjectUtils::add_complete_struct_member(member_seq_MovementAirEntity, member_movementMode);
        }
        {
            TypeIdentifierPair type_ids_speed;
            ReturnCode_t return_code_speed {eprosima::fastdds::dds::RETCODE_OK};
            return_code_speed =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_speed);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_speed)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "speed Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_speed = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_speed = 0x00000001;
            bool common_speed_ec {false};
            CommonStructMember common_speed {TypeObjectUtils::build_common_struct_member(member_id_speed, member_flags_speed, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_speed, common_speed_ec))};
            if (!common_speed_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure speed member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_speed = "speed";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_speed;
            ann_custom_MovementAirEntity.reset();
            CompleteMemberDetail detail_speed = TypeObjectUtils::build_complete_member_detail(name_speed, member_ann_builtin_speed, ann_custom_MovementAirEntity);
            CompleteStructMember member_speed = TypeObjectUtils::build_complete_struct_member(common_speed, detail_speed);
            TypeObjectUtils::add_complete_struct_member(member_seq_MovementAirEntity, member_speed);
        }
        {
            TypeIdentifierPair type_ids_speed_target;
            ReturnCode_t return_code_speed_target {eprosima::fastdds::dds::RETCODE_OK};
            return_code_speed_target =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_speed_target);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_speed_target)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "speed_target Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_speed_target = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_speed_target = 0x00000002;
            bool common_speed_target_ec {false};
            CommonStructMember common_speed_target {TypeObjectUtils::build_common_struct_member(member_id_speed_target, member_flags_speed_target, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_speed_target, common_speed_target_ec))};
            if (!common_speed_target_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure speed_target member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_speed_target = "speed_target";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_speed_target;
            ann_custom_MovementAirEntity.reset();
            CompleteMemberDetail detail_speed_target = TypeObjectUtils::build_complete_member_detail(name_speed_target, member_ann_builtin_speed_target, ann_custom_MovementAirEntity);
            CompleteStructMember member_speed_target = TypeObjectUtils::build_complete_struct_member(common_speed_target, detail_speed_target);
            TypeObjectUtils::add_complete_struct_member(member_seq_MovementAirEntity, member_speed_target);
        }
        {
            TypeIdentifierPair type_ids_geographicHeading;
            ReturnCode_t return_code_geographicHeading {eprosima::fastdds::dds::RETCODE_OK};
            return_code_geographicHeading =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_geographicHeading);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_geographicHeading)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "geographicHeading Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_geographicHeading = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_geographicHeading = 0x00000003;
            bool common_geographicHeading_ec {false};
            CommonStructMember common_geographicHeading {TypeObjectUtils::build_common_struct_member(member_id_geographicHeading, member_flags_geographicHeading, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_geographicHeading, common_geographicHeading_ec))};
            if (!common_geographicHeading_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure geographicHeading member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_geographicHeading = "geographicHeading";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_geographicHeading;
            ann_custom_MovementAirEntity.reset();
            CompleteMemberDetail detail_geographicHeading = TypeObjectUtils::build_complete_member_detail(name_geographicHeading, member_ann_builtin_geographicHeading, ann_custom_MovementAirEntity);
            CompleteStructMember member_geographicHeading = TypeObjectUtils::build_complete_struct_member(common_geographicHeading, detail_geographicHeading);
            TypeObjectUtils::add_complete_struct_member(member_seq_MovementAirEntity, member_geographicHeading);
        }
        {
            TypeIdentifierPair type_ids_geographicHeading_target;
            ReturnCode_t return_code_geographicHeading_target {eprosima::fastdds::dds::RETCODE_OK};
            return_code_geographicHeading_target =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_geographicHeading_target);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_geographicHeading_target)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "geographicHeading_target Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_geographicHeading_target = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_geographicHeading_target = 0x00000004;
            bool common_geographicHeading_target_ec {false};
            CommonStructMember common_geographicHeading_target {TypeObjectUtils::build_common_struct_member(member_id_geographicHeading_target, member_flags_geographicHeading_target, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_geographicHeading_target, common_geographicHeading_target_ec))};
            if (!common_geographicHeading_target_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure geographicHeading_target member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_geographicHeading_target = "geographicHeading_target";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_geographicHeading_target;
            ann_custom_MovementAirEntity.reset();
            CompleteMemberDetail detail_geographicHeading_target = TypeObjectUtils::build_complete_member_detail(name_geographicHeading_target, member_ann_builtin_geographicHeading_target, ann_custom_MovementAirEntity);
            CompleteStructMember member_geographicHeading_target = TypeObjectUtils::build_complete_struct_member(common_geographicHeading_target, detail_geographicHeading_target);
            TypeObjectUtils::add_complete_struct_member(member_seq_MovementAirEntity, member_geographicHeading_target);
        }
        {
            TypeIdentifierPair type_ids_magneticHeading;
            ReturnCode_t return_code_magneticHeading {eprosima::fastdds::dds::RETCODE_OK};
            return_code_magneticHeading =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_magneticHeading);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_magneticHeading)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "magneticHeading Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_magneticHeading = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_magneticHeading = 0x00000005;
            bool common_magneticHeading_ec {false};
            CommonStructMember common_magneticHeading {TypeObjectUtils::build_common_struct_member(member_id_magneticHeading, member_flags_magneticHeading, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_magneticHeading, common_magneticHeading_ec))};
            if (!common_magneticHeading_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure magneticHeading member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_magneticHeading = "magneticHeading";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_magneticHeading;
            ann_custom_MovementAirEntity.reset();
            CompleteMemberDetail detail_magneticHeading = TypeObjectUtils::build_complete_member_detail(name_magneticHeading, member_ann_builtin_magneticHeading, ann_custom_MovementAirEntity);
            CompleteStructMember member_magneticHeading = TypeObjectUtils::build_complete_struct_member(common_magneticHeading, detail_magneticHeading);
            TypeObjectUtils::add_complete_struct_member(member_seq_MovementAirEntity, member_magneticHeading);
        }
        {
            TypeIdentifierPair type_ids_tmllf;
            ReturnCode_t return_code_tmllf {eprosima::fastdds::dds::RETCODE_OK};
            return_code_tmllf =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_tmllf);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_tmllf)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "tmllf Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_tmllf = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_tmllf = 0x00000006;
            bool common_tmllf_ec {false};
            CommonStructMember common_tmllf {TypeObjectUtils::build_common_struct_member(member_id_tmllf, member_flags_tmllf, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_tmllf, common_tmllf_ec))};
            if (!common_tmllf_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure tmllf member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_tmllf = "tmllf";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_tmllf;
            ann_custom_MovementAirEntity.reset();
            CompleteMemberDetail detail_tmllf = TypeObjectUtils::build_complete_member_detail(name_tmllf, member_ann_builtin_tmllf, ann_custom_MovementAirEntity);
            CompleteStructMember member_tmllf = TypeObjectUtils::build_complete_struct_member(common_tmllf, detail_tmllf);
            TypeObjectUtils::add_complete_struct_member(member_seq_MovementAirEntity, member_tmllf);
        }
        {
            TypeIdentifierPair type_ids_onGround;
            ReturnCode_t return_code_onGround {eprosima::fastdds::dds::RETCODE_OK};
            return_code_onGround =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_onGround);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_onGround)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "onGround Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_onGround = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_onGround = 0x00000007;
            bool common_onGround_ec {false};
            CommonStructMember common_onGround {TypeObjectUtils::build_common_struct_member(member_id_onGround, member_flags_onGround, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_onGround, common_onGround_ec))};
            if (!common_onGround_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure onGround member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_onGround = "onGround";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_onGround;
            ann_custom_MovementAirEntity.reset();
            CompleteMemberDetail detail_onGround = TypeObjectUtils::build_complete_member_detail(name_onGround, member_ann_builtin_onGround, ann_custom_MovementAirEntity);
            CompleteStructMember member_onGround = TypeObjectUtils::build_complete_struct_member(common_onGround, detail_onGround);
            TypeObjectUtils::add_complete_struct_member(member_seq_MovementAirEntity, member_onGround);
        }
        {
            TypeIdentifierPair type_ids_missionName;
            ReturnCode_t return_code_missionName {eprosima::fastdds::dds::RETCODE_OK};
            return_code_missionName =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_char_32", type_ids_missionName);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_missionName)
            {
                return_code_missionName =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_char", type_ids_missionName);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_missionName)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_char_32_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_char_32 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_missionName, element_identifier_anonymous_array_char_32_ec))};
                if (!element_identifier_anonymous_array_char_32_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_char_32 = EK_COMPLETE;
                if (TK_NONE == type_ids_missionName.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_char_32 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_char_32 = 0;
                PlainCollectionHeader header_anonymous_array_char_32 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_char_32, element_flags_anonymous_array_char_32);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(32));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_char_32, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_char_32));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_char_32", type_ids_missionName))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_char_32 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_missionName = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_missionName = 0x00000008;
            bool common_missionName_ec {false};
            CommonStructMember common_missionName {TypeObjectUtils::build_common_struct_member(member_id_missionName, member_flags_missionName, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_missionName, common_missionName_ec))};
            if (!common_missionName_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure missionName member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_missionName = "missionName";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_missionName;
            ann_custom_MovementAirEntity.reset();
            CompleteMemberDetail detail_missionName = TypeObjectUtils::build_complete_member_detail(name_missionName, member_ann_builtin_missionName, ann_custom_MovementAirEntity);
            CompleteStructMember member_missionName = TypeObjectUtils::build_complete_struct_member(common_missionName, detail_missionName);
            TypeObjectUtils::add_complete_struct_member(member_seq_MovementAirEntity, member_missionName);
        }
        {
            TypeIdentifierPair type_ids_indicatedSpeed;
            ReturnCode_t return_code_indicatedSpeed {eprosima::fastdds::dds::RETCODE_OK};
            return_code_indicatedSpeed =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_indicatedSpeed);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_indicatedSpeed)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "indicatedSpeed Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_indicatedSpeed = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_indicatedSpeed = 0x00000009;
            bool common_indicatedSpeed_ec {false};
            CommonStructMember common_indicatedSpeed {TypeObjectUtils::build_common_struct_member(member_id_indicatedSpeed, member_flags_indicatedSpeed, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_indicatedSpeed, common_indicatedSpeed_ec))};
            if (!common_indicatedSpeed_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure indicatedSpeed member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_indicatedSpeed = "indicatedSpeed";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_indicatedSpeed;
            ann_custom_MovementAirEntity.reset();
            CompleteMemberDetail detail_indicatedSpeed = TypeObjectUtils::build_complete_member_detail(name_indicatedSpeed, member_ann_builtin_indicatedSpeed, ann_custom_MovementAirEntity);
            CompleteStructMember member_indicatedSpeed = TypeObjectUtils::build_complete_struct_member(common_indicatedSpeed, detail_indicatedSpeed);
            TypeObjectUtils::add_complete_struct_member(member_seq_MovementAirEntity, member_indicatedSpeed);
        }
        {
            TypeIdentifierPair type_ids_indicatedSpeed_target;
            ReturnCode_t return_code_indicatedSpeed_target {eprosima::fastdds::dds::RETCODE_OK};
            return_code_indicatedSpeed_target =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_indicatedSpeed_target);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_indicatedSpeed_target)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "indicatedSpeed_target Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_indicatedSpeed_target = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_indicatedSpeed_target = 0x0000000a;
            bool common_indicatedSpeed_target_ec {false};
            CommonStructMember common_indicatedSpeed_target {TypeObjectUtils::build_common_struct_member(member_id_indicatedSpeed_target, member_flags_indicatedSpeed_target, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_indicatedSpeed_target, common_indicatedSpeed_target_ec))};
            if (!common_indicatedSpeed_target_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure indicatedSpeed_target member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_indicatedSpeed_target = "indicatedSpeed_target";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_indicatedSpeed_target;
            ann_custom_MovementAirEntity.reset();
            CompleteMemberDetail detail_indicatedSpeed_target = TypeObjectUtils::build_complete_member_detail(name_indicatedSpeed_target, member_ann_builtin_indicatedSpeed_target, ann_custom_MovementAirEntity);
            CompleteStructMember member_indicatedSpeed_target = TypeObjectUtils::build_complete_struct_member(common_indicatedSpeed_target, detail_indicatedSpeed_target);
            TypeObjectUtils::add_complete_struct_member(member_seq_MovementAirEntity, member_indicatedSpeed_target);
        }
        {
            TypeIdentifierPair type_ids_loadFactor;
            ReturnCode_t return_code_loadFactor {eprosima::fastdds::dds::RETCODE_OK};
            return_code_loadFactor =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_loadFactor);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_loadFactor)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "loadFactor Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_loadFactor = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_loadFactor = 0x0000000b;
            bool common_loadFactor_ec {false};
            CommonStructMember common_loadFactor {TypeObjectUtils::build_common_struct_member(member_id_loadFactor, member_flags_loadFactor, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_loadFactor, common_loadFactor_ec))};
            if (!common_loadFactor_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure loadFactor member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_loadFactor = "loadFactor";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_loadFactor;
            ann_custom_MovementAirEntity.reset();
            CompleteMemberDetail detail_loadFactor = TypeObjectUtils::build_complete_member_detail(name_loadFactor, member_ann_builtin_loadFactor, ann_custom_MovementAirEntity);
            CompleteStructMember member_loadFactor = TypeObjectUtils::build_complete_struct_member(common_loadFactor, detail_loadFactor);
            TypeObjectUtils::add_complete_struct_member(member_seq_MovementAirEntity, member_loadFactor);
        }
        {
            TypeIdentifierPair type_ids_verticalSpeed;
            ReturnCode_t return_code_verticalSpeed {eprosima::fastdds::dds::RETCODE_OK};
            return_code_verticalSpeed =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_verticalSpeed);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_verticalSpeed)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "verticalSpeed Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_verticalSpeed = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_verticalSpeed = 0x0000000c;
            bool common_verticalSpeed_ec {false};
            CommonStructMember common_verticalSpeed {TypeObjectUtils::build_common_struct_member(member_id_verticalSpeed, member_flags_verticalSpeed, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_verticalSpeed, common_verticalSpeed_ec))};
            if (!common_verticalSpeed_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure verticalSpeed member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_verticalSpeed = "verticalSpeed";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_verticalSpeed;
            ann_custom_MovementAirEntity.reset();
            CompleteMemberDetail detail_verticalSpeed = TypeObjectUtils::build_complete_member_detail(name_verticalSpeed, member_ann_builtin_verticalSpeed, ann_custom_MovementAirEntity);
            CompleteStructMember member_verticalSpeed = TypeObjectUtils::build_complete_struct_member(common_verticalSpeed, detail_verticalSpeed);
            TypeObjectUtils::add_complete_struct_member(member_seq_MovementAirEntity, member_verticalSpeed);
        }
        {
            TypeIdentifierPair type_ids_verticalSpeed_target;
            ReturnCode_t return_code_verticalSpeed_target {eprosima::fastdds::dds::RETCODE_OK};
            return_code_verticalSpeed_target =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_verticalSpeed_target);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_verticalSpeed_target)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "verticalSpeed_target Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_verticalSpeed_target = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_verticalSpeed_target = 0x0000000d;
            bool common_verticalSpeed_target_ec {false};
            CommonStructMember common_verticalSpeed_target {TypeObjectUtils::build_common_struct_member(member_id_verticalSpeed_target, member_flags_verticalSpeed_target, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_verticalSpeed_target, common_verticalSpeed_target_ec))};
            if (!common_verticalSpeed_target_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure verticalSpeed_target member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_verticalSpeed_target = "verticalSpeed_target";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_verticalSpeed_target;
            ann_custom_MovementAirEntity.reset();
            CompleteMemberDetail detail_verticalSpeed_target = TypeObjectUtils::build_complete_member_detail(name_verticalSpeed_target, member_ann_builtin_verticalSpeed_target, ann_custom_MovementAirEntity);
            CompleteStructMember member_verticalSpeed_target = TypeObjectUtils::build_complete_struct_member(common_verticalSpeed_target, detail_verticalSpeed_target);
            TypeObjectUtils::add_complete_struct_member(member_seq_MovementAirEntity, member_verticalSpeed_target);
        }
        {
            TypeIdentifierPair type_ids_groundSpeed;
            ReturnCode_t return_code_groundSpeed {eprosima::fastdds::dds::RETCODE_OK};
            return_code_groundSpeed =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_groundSpeed);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_groundSpeed)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "groundSpeed Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_groundSpeed = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_groundSpeed = 0x0000000e;
            bool common_groundSpeed_ec {false};
            CommonStructMember common_groundSpeed {TypeObjectUtils::build_common_struct_member(member_id_groundSpeed, member_flags_groundSpeed, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_groundSpeed, common_groundSpeed_ec))};
            if (!common_groundSpeed_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure groundSpeed member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_groundSpeed = "groundSpeed";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_groundSpeed;
            ann_custom_MovementAirEntity.reset();
            CompleteMemberDetail detail_groundSpeed = TypeObjectUtils::build_complete_member_detail(name_groundSpeed, member_ann_builtin_groundSpeed, ann_custom_MovementAirEntity);
            CompleteStructMember member_groundSpeed = TypeObjectUtils::build_complete_struct_member(common_groundSpeed, detail_groundSpeed);
            TypeObjectUtils::add_complete_struct_member(member_seq_MovementAirEntity, member_groundSpeed);
        }
        {
            TypeIdentifierPair type_ids_groundSpeed_target;
            ReturnCode_t return_code_groundSpeed_target {eprosima::fastdds::dds::RETCODE_OK};
            return_code_groundSpeed_target =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_groundSpeed_target);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_groundSpeed_target)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "groundSpeed_target Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_groundSpeed_target = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_groundSpeed_target = 0x0000000f;
            bool common_groundSpeed_target_ec {false};
            CommonStructMember common_groundSpeed_target {TypeObjectUtils::build_common_struct_member(member_id_groundSpeed_target, member_flags_groundSpeed_target, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_groundSpeed_target, common_groundSpeed_target_ec))};
            if (!common_groundSpeed_target_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure groundSpeed_target member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_groundSpeed_target = "groundSpeed_target";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_groundSpeed_target;
            ann_custom_MovementAirEntity.reset();
            CompleteMemberDetail detail_groundSpeed_target = TypeObjectUtils::build_complete_member_detail(name_groundSpeed_target, member_ann_builtin_groundSpeed_target, ann_custom_MovementAirEntity);
            CompleteStructMember member_groundSpeed_target = TypeObjectUtils::build_complete_struct_member(common_groundSpeed_target, detail_groundSpeed_target);
            TypeObjectUtils::add_complete_struct_member(member_seq_MovementAirEntity, member_groundSpeed_target);
        }
        {
            TypeIdentifierPair type_ids_throttle;
            ReturnCode_t return_code_throttle {eprosima::fastdds::dds::RETCODE_OK};
            return_code_throttle =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_throttle);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_throttle)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "throttle Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_throttle = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_throttle = 0x00000010;
            bool common_throttle_ec {false};
            CommonStructMember common_throttle {TypeObjectUtils::build_common_struct_member(member_id_throttle, member_flags_throttle, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_throttle, common_throttle_ec))};
            if (!common_throttle_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure throttle member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_throttle = "throttle";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_throttle;
            ann_custom_MovementAirEntity.reset();
            CompleteMemberDetail detail_throttle = TypeObjectUtils::build_complete_member_detail(name_throttle, member_ann_builtin_throttle, ann_custom_MovementAirEntity);
            CompleteStructMember member_throttle = TypeObjectUtils::build_complete_struct_member(common_throttle, detail_throttle);
            TypeObjectUtils::add_complete_struct_member(member_seq_MovementAirEntity, member_throttle);
        }
        {
            TypeIdentifierPair type_ids_infiniteFuel;
            ReturnCode_t return_code_infiniteFuel {eprosima::fastdds::dds::RETCODE_OK};
            return_code_infiniteFuel =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_infiniteFuel);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_infiniteFuel)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "infiniteFuel Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_infiniteFuel = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_infiniteFuel = 0x00000011;
            bool common_infiniteFuel_ec {false};
            CommonStructMember common_infiniteFuel {TypeObjectUtils::build_common_struct_member(member_id_infiniteFuel, member_flags_infiniteFuel, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_infiniteFuel, common_infiniteFuel_ec))};
            if (!common_infiniteFuel_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure infiniteFuel member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_infiniteFuel = "infiniteFuel";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_infiniteFuel;
            ann_custom_MovementAirEntity.reset();
            CompleteMemberDetail detail_infiniteFuel = TypeObjectUtils::build_complete_member_detail(name_infiniteFuel, member_ann_builtin_infiniteFuel, ann_custom_MovementAirEntity);
            CompleteStructMember member_infiniteFuel = TypeObjectUtils::build_complete_struct_member(common_infiniteFuel, detail_infiniteFuel);
            TypeObjectUtils::add_complete_struct_member(member_seq_MovementAirEntity, member_infiniteFuel);
        }
        {
            TypeIdentifierPair type_ids_initialFuel;
            ReturnCode_t return_code_initialFuel {eprosima::fastdds::dds::RETCODE_OK};
            return_code_initialFuel =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_initialFuel);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_initialFuel)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "initialFuel Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_initialFuel = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_initialFuel = 0x00000012;
            bool common_initialFuel_ec {false};
            CommonStructMember common_initialFuel {TypeObjectUtils::build_common_struct_member(member_id_initialFuel, member_flags_initialFuel, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_initialFuel, common_initialFuel_ec))};
            if (!common_initialFuel_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure initialFuel member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_initialFuel = "initialFuel";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_initialFuel;
            ann_custom_MovementAirEntity.reset();
            CompleteMemberDetail detail_initialFuel = TypeObjectUtils::build_complete_member_detail(name_initialFuel, member_ann_builtin_initialFuel, ann_custom_MovementAirEntity);
            CompleteStructMember member_initialFuel = TypeObjectUtils::build_complete_struct_member(common_initialFuel, detail_initialFuel);
            TypeObjectUtils::add_complete_struct_member(member_seq_MovementAirEntity, member_initialFuel);
        }
        {
            TypeIdentifierPair type_ids_currentFuel;
            ReturnCode_t return_code_currentFuel {eprosima::fastdds::dds::RETCODE_OK};
            return_code_currentFuel =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_currentFuel);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_currentFuel)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "currentFuel Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_currentFuel = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_currentFuel = 0x00000013;
            bool common_currentFuel_ec {false};
            CommonStructMember common_currentFuel {TypeObjectUtils::build_common_struct_member(member_id_currentFuel, member_flags_currentFuel, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_currentFuel, common_currentFuel_ec))};
            if (!common_currentFuel_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure currentFuel member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_currentFuel = "currentFuel";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_currentFuel;
            ann_custom_MovementAirEntity.reset();
            CompleteMemberDetail detail_currentFuel = TypeObjectUtils::build_complete_member_detail(name_currentFuel, member_ann_builtin_currentFuel, ann_custom_MovementAirEntity);
            CompleteStructMember member_currentFuel = TypeObjectUtils::build_complete_struct_member(common_currentFuel, detail_currentFuel);
            TypeObjectUtils::add_complete_struct_member(member_seq_MovementAirEntity, member_currentFuel);
        }
        {
            TypeIdentifierPair type_ids_fuelConsumption;
            ReturnCode_t return_code_fuelConsumption {eprosima::fastdds::dds::RETCODE_OK};
            return_code_fuelConsumption =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_fuelConsumption);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_fuelConsumption)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "fuelConsumption Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_fuelConsumption = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_fuelConsumption = 0x00000014;
            bool common_fuelConsumption_ec {false};
            CommonStructMember common_fuelConsumption {TypeObjectUtils::build_common_struct_member(member_id_fuelConsumption, member_flags_fuelConsumption, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_fuelConsumption, common_fuelConsumption_ec))};
            if (!common_fuelConsumption_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure fuelConsumption member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_fuelConsumption = "fuelConsumption";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_fuelConsumption;
            ann_custom_MovementAirEntity.reset();
            CompleteMemberDetail detail_fuelConsumption = TypeObjectUtils::build_complete_member_detail(name_fuelConsumption, member_ann_builtin_fuelConsumption, ann_custom_MovementAirEntity);
            CompleteStructMember member_fuelConsumption = TypeObjectUtils::build_complete_struct_member(common_fuelConsumption, detail_fuelConsumption);
            TypeObjectUtils::add_complete_struct_member(member_seq_MovementAirEntity, member_fuelConsumption);
        }
        CompleteStructType struct_type_MovementAirEntity = TypeObjectUtils::build_complete_struct_type(struct_flags_MovementAirEntity, header_MovementAirEntity, member_seq_MovementAirEntity);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MovementAirEntity, type_name_MovementAirEntity.to_string(), type_ids_MovementAirEntity))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MovementAirEntity already registered in TypeObjectRegistry for a different type.");
        }
    }
}void register_Commands_type_identifier(
        TypeIdentifierPair& type_ids_Commands)
{
    ReturnCode_t return_code_Commands {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Commands =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "Commands", type_ids_Commands);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Commands)
    {
        BitmaskTypeFlag bitmask_flags_Commands = 0;
        BitBound bit_bound_Commands = 32;
        CommonEnumeratedHeader common_Commands = TypeObjectUtils::build_common_enumerated_header(bit_bound_Commands, true);
        QualifiedTypeName type_name_Commands = "Commands";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Commands;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Commands;
        AppliedAnnotationSeq tmp_ann_custom_Commands;
        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_Commands;
        if (!tmp_ann_custom_Commands.empty())
        {
            ann_custom_Commands = tmp_ann_custom_Commands;
        }

        CompleteTypeDetail detail_Commands = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Commands, ann_custom_Commands, type_name_Commands.to_string());
        CompleteEnumeratedHeader header_Commands = TypeObjectUtils::build_complete_enumerated_header(common_Commands, detail_Commands, true);
        CompleteBitflagSeq flag_seq_Commands;
        {
            uint16_t position_None = 0;
            BitflagFlag flags_None = 0;
            CommonBitflag common_None = TypeObjectUtils::build_common_bitflag(position_None, flags_None);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_None;
            ann_custom_Commands.reset();
            MemberName name_None = "None";
            CompleteMemberDetail detail_None = TypeObjectUtils::build_complete_member_detail(name_None, member_ann_builtin_None, ann_custom_Commands);
            CompleteBitflag bitflag_None = TypeObjectUtils::build_complete_bitflag(common_None, detail_None);
            TypeObjectUtils::add_complete_bitflag(flag_seq_Commands, bitflag_None);
        }
        {
            uint16_t position_Add = 1;
            BitflagFlag flags_Add = 0;
            CommonBitflag common_Add = TypeObjectUtils::build_common_bitflag(position_Add, flags_Add);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Add;
            ann_custom_Commands.reset();
            MemberName name_Add = "Add";
            CompleteMemberDetail detail_Add = TypeObjectUtils::build_complete_member_detail(name_Add, member_ann_builtin_Add, ann_custom_Commands);
            CompleteBitflag bitflag_Add = TypeObjectUtils::build_complete_bitflag(common_Add, detail_Add);
            TypeObjectUtils::add_complete_bitflag(flag_seq_Commands, bitflag_Add);
        }
        {
            uint16_t position_Delete = 2;
            BitflagFlag flags_Delete = 0;
            CommonBitflag common_Delete = TypeObjectUtils::build_common_bitflag(position_Delete, flags_Delete);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Delete;
            ann_custom_Commands.reset();
            MemberName name_Delete = "Delete";
            CompleteMemberDetail detail_Delete = TypeObjectUtils::build_complete_member_detail(name_Delete, member_ann_builtin_Delete, ann_custom_Commands);
            CompleteBitflag bitflag_Delete = TypeObjectUtils::build_complete_bitflag(common_Delete, detail_Delete);
            TypeObjectUtils::add_complete_bitflag(flag_seq_Commands, bitflag_Delete);
        }
        {
            uint16_t position_ChangeStatus = 3;
            BitflagFlag flags_ChangeStatus = 0;
            CommonBitflag common_ChangeStatus = TypeObjectUtils::build_common_bitflag(position_ChangeStatus, flags_ChangeStatus);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ChangeStatus;
            ann_custom_Commands.reset();
            MemberName name_ChangeStatus = "ChangeStatus";
            CompleteMemberDetail detail_ChangeStatus = TypeObjectUtils::build_complete_member_detail(name_ChangeStatus, member_ann_builtin_ChangeStatus, ann_custom_Commands);
            CompleteBitflag bitflag_ChangeStatus = TypeObjectUtils::build_complete_bitflag(common_ChangeStatus, detail_ChangeStatus);
            TypeObjectUtils::add_complete_bitflag(flag_seq_Commands, bitflag_ChangeStatus);
        }
        {
            uint16_t position_ChangeSide = 4;
            BitflagFlag flags_ChangeSide = 0;
            CommonBitflag common_ChangeSide = TypeObjectUtils::build_common_bitflag(position_ChangeSide, flags_ChangeSide);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ChangeSide;
            ann_custom_Commands.reset();
            MemberName name_ChangeSide = "ChangeSide";
            CompleteMemberDetail detail_ChangeSide = TypeObjectUtils::build_complete_member_detail(name_ChangeSide, member_ann_builtin_ChangeSide, ann_custom_Commands);
            CompleteBitflag bitflag_ChangeSide = TypeObjectUtils::build_complete_bitflag(common_ChangeSide, detail_ChangeSide);
            TypeObjectUtils::add_complete_bitflag(flag_seq_Commands, bitflag_ChangeSide);
        }
        {
            uint16_t position_ChangeTarget = 5;
            BitflagFlag flags_ChangeTarget = 0;
            CommonBitflag common_ChangeTarget = TypeObjectUtils::build_common_bitflag(position_ChangeTarget, flags_ChangeTarget);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ChangeTarget;
            ann_custom_Commands.reset();
            MemberName name_ChangeTarget = "ChangeTarget";
            CompleteMemberDetail detail_ChangeTarget = TypeObjectUtils::build_complete_member_detail(name_ChangeTarget, member_ann_builtin_ChangeTarget, ann_custom_Commands);
            CompleteBitflag bitflag_ChangeTarget = TypeObjectUtils::build_complete_bitflag(common_ChangeTarget, detail_ChangeTarget);
            TypeObjectUtils::add_complete_bitflag(flag_seq_Commands, bitflag_ChangeTarget);
        }
        {
            uint16_t position_ChangePos = 6;
            BitflagFlag flags_ChangePos = 0;
            CommonBitflag common_ChangePos = TypeObjectUtils::build_common_bitflag(position_ChangePos, flags_ChangePos);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ChangePos;
            ann_custom_Commands.reset();
            MemberName name_ChangePos = "ChangePos";
            CompleteMemberDetail detail_ChangePos = TypeObjectUtils::build_complete_member_detail(name_ChangePos, member_ann_builtin_ChangePos, ann_custom_Commands);
            CompleteBitflag bitflag_ChangePos = TypeObjectUtils::build_complete_bitflag(common_ChangePos, detail_ChangePos);
            TypeObjectUtils::add_complete_bitflag(flag_seq_Commands, bitflag_ChangePos);
        }
        {
            uint16_t position_ChangeAltitude = 7;
            BitflagFlag flags_ChangeAltitude = 0;
            CommonBitflag common_ChangeAltitude = TypeObjectUtils::build_common_bitflag(position_ChangeAltitude, flags_ChangeAltitude);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ChangeAltitude;
            ann_custom_Commands.reset();
            MemberName name_ChangeAltitude = "ChangeAltitude";
            CompleteMemberDetail detail_ChangeAltitude = TypeObjectUtils::build_complete_member_detail(name_ChangeAltitude, member_ann_builtin_ChangeAltitude, ann_custom_Commands);
            CompleteBitflag bitflag_ChangeAltitude = TypeObjectUtils::build_complete_bitflag(common_ChangeAltitude, detail_ChangeAltitude);
            TypeObjectUtils::add_complete_bitflag(flag_seq_Commands, bitflag_ChangeAltitude);
        }
        {
            uint16_t position_ChangeMovementType = 8;
            BitflagFlag flags_ChangeMovementType = 0;
            CommonBitflag common_ChangeMovementType = TypeObjectUtils::build_common_bitflag(position_ChangeMovementType, flags_ChangeMovementType);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ChangeMovementType;
            ann_custom_Commands.reset();
            MemberName name_ChangeMovementType = "ChangeMovementType";
            CompleteMemberDetail detail_ChangeMovementType = TypeObjectUtils::build_complete_member_detail(name_ChangeMovementType, member_ann_builtin_ChangeMovementType, ann_custom_Commands);
            CompleteBitflag bitflag_ChangeMovementType = TypeObjectUtils::build_complete_bitflag(common_ChangeMovementType, detail_ChangeMovementType);
            TypeObjectUtils::add_complete_bitflag(flag_seq_Commands, bitflag_ChangeMovementType);
        }
        {
            uint16_t position_ChangeIndicatedSpeed = 9;
            BitflagFlag flags_ChangeIndicatedSpeed = 0;
            CommonBitflag common_ChangeIndicatedSpeed = TypeObjectUtils::build_common_bitflag(position_ChangeIndicatedSpeed, flags_ChangeIndicatedSpeed);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ChangeIndicatedSpeed;
            ann_custom_Commands.reset();
            MemberName name_ChangeIndicatedSpeed = "ChangeIndicatedSpeed";
            CompleteMemberDetail detail_ChangeIndicatedSpeed = TypeObjectUtils::build_complete_member_detail(name_ChangeIndicatedSpeed, member_ann_builtin_ChangeIndicatedSpeed, ann_custom_Commands);
            CompleteBitflag bitflag_ChangeIndicatedSpeed = TypeObjectUtils::build_complete_bitflag(common_ChangeIndicatedSpeed, detail_ChangeIndicatedSpeed);
            TypeObjectUtils::add_complete_bitflag(flag_seq_Commands, bitflag_ChangeIndicatedSpeed);
        }
        {
            uint16_t position_ChangeHeading = 10;
            BitflagFlag flags_ChangeHeading = 0;
            CommonBitflag common_ChangeHeading = TypeObjectUtils::build_common_bitflag(position_ChangeHeading, flags_ChangeHeading);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ChangeHeading;
            ann_custom_Commands.reset();
            MemberName name_ChangeHeading = "ChangeHeading";
            CompleteMemberDetail detail_ChangeHeading = TypeObjectUtils::build_complete_member_detail(name_ChangeHeading, member_ann_builtin_ChangeHeading, ann_custom_Commands);
            CompleteBitflag bitflag_ChangeHeading = TypeObjectUtils::build_complete_bitflag(common_ChangeHeading, detail_ChangeHeading);
            TypeObjectUtils::add_complete_bitflag(flag_seq_Commands, bitflag_ChangeHeading);
        }
        {
            uint16_t position_ChangeMovementParams = 11;
            BitflagFlag flags_ChangeMovementParams = 0;
            CommonBitflag common_ChangeMovementParams = TypeObjectUtils::build_common_bitflag(position_ChangeMovementParams, flags_ChangeMovementParams);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ChangeMovementParams;
            ann_custom_Commands.reset();
            MemberName name_ChangeMovementParams = "ChangeMovementParams";
            CompleteMemberDetail detail_ChangeMovementParams = TypeObjectUtils::build_complete_member_detail(name_ChangeMovementParams, member_ann_builtin_ChangeMovementParams, ann_custom_Commands);
            CompleteBitflag bitflag_ChangeMovementParams = TypeObjectUtils::build_complete_bitflag(common_ChangeMovementParams, detail_ChangeMovementParams);
            TypeObjectUtils::add_complete_bitflag(flag_seq_Commands, bitflag_ChangeMovementParams);
        }
        {
            uint16_t position_ChangeCommsFlag = 12;
            BitflagFlag flags_ChangeCommsFlag = 0;
            CommonBitflag common_ChangeCommsFlag = TypeObjectUtils::build_common_bitflag(position_ChangeCommsFlag, flags_ChangeCommsFlag);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ChangeCommsFlag;
            ann_custom_Commands.reset();
            MemberName name_ChangeCommsFlag = "ChangeCommsFlag";
            CompleteMemberDetail detail_ChangeCommsFlag = TypeObjectUtils::build_complete_member_detail(name_ChangeCommsFlag, member_ann_builtin_ChangeCommsFlag, ann_custom_Commands);
            CompleteBitflag bitflag_ChangeCommsFlag = TypeObjectUtils::build_complete_bitflag(common_ChangeCommsFlag, detail_ChangeCommsFlag);
            TypeObjectUtils::add_complete_bitflag(flag_seq_Commands, bitflag_ChangeCommsFlag);
        }
        {
            uint16_t position_ChangeDamage = 13;
            BitflagFlag flags_ChangeDamage = 0;
            CommonBitflag common_ChangeDamage = TypeObjectUtils::build_common_bitflag(position_ChangeDamage, flags_ChangeDamage);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ChangeDamage;
            ann_custom_Commands.reset();
            MemberName name_ChangeDamage = "ChangeDamage";
            CompleteMemberDetail detail_ChangeDamage = TypeObjectUtils::build_complete_member_detail(name_ChangeDamage, member_ann_builtin_ChangeDamage, ann_custom_Commands);
            CompleteBitflag bitflag_ChangeDamage = TypeObjectUtils::build_complete_bitflag(common_ChangeDamage, detail_ChangeDamage);
            TypeObjectUtils::add_complete_bitflag(flag_seq_Commands, bitflag_ChangeDamage);
        }
        {
            uint16_t position_GCIManoeuvreCmd = 14;
            BitflagFlag flags_GCIManoeuvreCmd = 0;
            CommonBitflag common_GCIManoeuvreCmd = TypeObjectUtils::build_common_bitflag(position_GCIManoeuvreCmd, flags_GCIManoeuvreCmd);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_GCIManoeuvreCmd;
            ann_custom_Commands.reset();
            MemberName name_GCIManoeuvreCmd = "GCIManoeuvreCmd";
            CompleteMemberDetail detail_GCIManoeuvreCmd = TypeObjectUtils::build_complete_member_detail(name_GCIManoeuvreCmd, member_ann_builtin_GCIManoeuvreCmd, ann_custom_Commands);
            CompleteBitflag bitflag_GCIManoeuvreCmd = TypeObjectUtils::build_complete_bitflag(common_GCIManoeuvreCmd, detail_GCIManoeuvreCmd);
            TypeObjectUtils::add_complete_bitflag(flag_seq_Commands, bitflag_GCIManoeuvreCmd);
        }
        {
            uint16_t position_ChangeVerticalSpeed = 15;
            BitflagFlag flags_ChangeVerticalSpeed = 0;
            CommonBitflag common_ChangeVerticalSpeed = TypeObjectUtils::build_common_bitflag(position_ChangeVerticalSpeed, flags_ChangeVerticalSpeed);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ChangeVerticalSpeed;
            ann_custom_Commands.reset();
            MemberName name_ChangeVerticalSpeed = "ChangeVerticalSpeed";
            CompleteMemberDetail detail_ChangeVerticalSpeed = TypeObjectUtils::build_complete_member_detail(name_ChangeVerticalSpeed, member_ann_builtin_ChangeVerticalSpeed, ann_custom_Commands);
            CompleteBitflag bitflag_ChangeVerticalSpeed = TypeObjectUtils::build_complete_bitflag(common_ChangeVerticalSpeed, detail_ChangeVerticalSpeed);
            TypeObjectUtils::add_complete_bitflag(flag_seq_Commands, bitflag_ChangeVerticalSpeed);
        }
        {
            uint16_t position_ChangeGroundSpeed = 16;
            BitflagFlag flags_ChangeGroundSpeed = 0;
            CommonBitflag common_ChangeGroundSpeed = TypeObjectUtils::build_common_bitflag(position_ChangeGroundSpeed, flags_ChangeGroundSpeed);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ChangeGroundSpeed;
            ann_custom_Commands.reset();
            MemberName name_ChangeGroundSpeed = "ChangeGroundSpeed";
            CompleteMemberDetail detail_ChangeGroundSpeed = TypeObjectUtils::build_complete_member_detail(name_ChangeGroundSpeed, member_ann_builtin_ChangeGroundSpeed, ann_custom_Commands);
            CompleteBitflag bitflag_ChangeGroundSpeed = TypeObjectUtils::build_complete_bitflag(common_ChangeGroundSpeed, detail_ChangeGroundSpeed);
            TypeObjectUtils::add_complete_bitflag(flag_seq_Commands, bitflag_ChangeGroundSpeed);
        }
        {
            uint16_t position_ChangeCurrentFuel = 17;
            BitflagFlag flags_ChangeCurrentFuel = 0;
            CommonBitflag common_ChangeCurrentFuel = TypeObjectUtils::build_common_bitflag(position_ChangeCurrentFuel, flags_ChangeCurrentFuel);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ChangeCurrentFuel;
            ann_custom_Commands.reset();
            MemberName name_ChangeCurrentFuel = "ChangeCurrentFuel";
            CompleteMemberDetail detail_ChangeCurrentFuel = TypeObjectUtils::build_complete_member_detail(name_ChangeCurrentFuel, member_ann_builtin_ChangeCurrentFuel, ann_custom_Commands);
            CompleteBitflag bitflag_ChangeCurrentFuel = TypeObjectUtils::build_complete_bitflag(common_ChangeCurrentFuel, detail_ChangeCurrentFuel);
            TypeObjectUtils::add_complete_bitflag(flag_seq_Commands, bitflag_ChangeCurrentFuel);
        }
        {
            uint16_t position_ChangeInfiniteFuel = 18;
            BitflagFlag flags_ChangeInfiniteFuel = 0;
            CommonBitflag common_ChangeInfiniteFuel = TypeObjectUtils::build_common_bitflag(position_ChangeInfiniteFuel, flags_ChangeInfiniteFuel);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ChangeInfiniteFuel;
            ann_custom_Commands.reset();
            MemberName name_ChangeInfiniteFuel = "ChangeInfiniteFuel";
            CompleteMemberDetail detail_ChangeInfiniteFuel = TypeObjectUtils::build_complete_member_detail(name_ChangeInfiniteFuel, member_ann_builtin_ChangeInfiniteFuel, ann_custom_Commands);
            CompleteBitflag bitflag_ChangeInfiniteFuel = TypeObjectUtils::build_complete_bitflag(common_ChangeInfiniteFuel, detail_ChangeInfiniteFuel);
            TypeObjectUtils::add_complete_bitflag(flag_seq_Commands, bitflag_ChangeInfiniteFuel);
        }
        CompleteBitmaskType bitmask_type_Commands = TypeObjectUtils::build_complete_bitmask_type(bitmask_flags_Commands, header_Commands, flag_seq_Commands);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_bitmask_type_object(bitmask_type_Commands,
                    type_name_Commands.to_string(), type_ids_Commands))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "Commands already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_AirEntity_type_identifier(
        TypeIdentifierPair& type_ids_AirEntity)
{

    ReturnCode_t return_code_AirEntity {eprosima::fastdds::dds::RETCODE_OK};
    return_code_AirEntity =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "AirEntity", type_ids_AirEntity);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_AirEntity)
    {
        StructTypeFlag struct_flags_AirEntity = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_AirEntity = "AirEntity";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_AirEntity;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_AirEntity;
        CompleteTypeDetail detail_AirEntity = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_AirEntity, ann_custom_AirEntity, type_name_AirEntity.to_string());
        CompleteStructHeader header_AirEntity;
        header_AirEntity = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_AirEntity);
        CompleteStructMemberSeq member_seq_AirEntity;
        {
            TypeIdentifierPair type_ids_commands;
            ReturnCode_t return_code_commands {eprosima::fastdds::dds::RETCODE_OK};
            return_code_commands =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "Commands", type_ids_commands);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_commands)
            {
            ::register_Commands_type_identifier(type_ids_commands);
            }
            StructMemberFlag member_flags_commands = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_commands = 0x00000000;
            bool common_commands_ec {false};
            CommonStructMember common_commands {TypeObjectUtils::build_common_struct_member(member_id_commands, member_flags_commands, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_commands, common_commands_ec))};
            if (!common_commands_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure commands member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_commands = "commands";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_commands;
            ann_custom_AirEntity.reset();
            CompleteMemberDetail detail_commands = TypeObjectUtils::build_complete_member_detail(name_commands, member_ann_builtin_commands, ann_custom_AirEntity);
            CompleteStructMember member_commands = TypeObjectUtils::build_complete_struct_member(common_commands, detail_commands);
            TypeObjectUtils::add_complete_struct_member(member_seq_AirEntity, member_commands);
        }
        {
            TypeIdentifierPair type_ids_entity_id;
            ReturnCode_t return_code_entity_id {eprosima::fastdds::dds::RETCODE_OK};
            return_code_entity_id =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "EntityID", type_ids_entity_id);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_entity_id)
            {
            ::register_EntityID_type_identifier(type_ids_entity_id);
            }
            StructMemberFlag member_flags_entity_id = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_entity_id = 0x00000001;
            bool common_entity_id_ec {false};
            CommonStructMember common_entity_id {TypeObjectUtils::build_common_struct_member(member_id_entity_id, member_flags_entity_id, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_entity_id, common_entity_id_ec))};
            if (!common_entity_id_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure entity_id member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_entity_id = "entity_id";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_entity_id;
            ann_custom_AirEntity.reset();
            CompleteMemberDetail detail_entity_id = TypeObjectUtils::build_complete_member_detail(name_entity_id, member_ann_builtin_entity_id, ann_custom_AirEntity);
            CompleteStructMember member_entity_id = TypeObjectUtils::build_complete_struct_member(common_entity_id, detail_entity_id);
            TypeObjectUtils::add_complete_struct_member(member_seq_AirEntity, member_entity_id);
        }
        {
            TypeIdentifierPair type_ids_target_entity;
            ReturnCode_t return_code_target_entity {eprosima::fastdds::dds::RETCODE_OK};
            return_code_target_entity =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "Target", type_ids_target_entity);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_target_entity)
            {
            ::register_Target_type_identifier(type_ids_target_entity);
            }
            StructMemberFlag member_flags_target_entity = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_target_entity = 0x00000002;
            bool common_target_entity_ec {false};
            CommonStructMember common_target_entity {TypeObjectUtils::build_common_struct_member(member_id_target_entity, member_flags_target_entity, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_target_entity, common_target_entity_ec))};
            if (!common_target_entity_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure target_entity member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_target_entity = "target_entity";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_target_entity;
            ann_custom_AirEntity.reset();
            CompleteMemberDetail detail_target_entity = TypeObjectUtils::build_complete_member_detail(name_target_entity, member_ann_builtin_target_entity, ann_custom_AirEntity);
            CompleteStructMember member_target_entity = TypeObjectUtils::build_complete_struct_member(common_target_entity, detail_target_entity);
            TypeObjectUtils::add_complete_struct_member(member_seq_AirEntity, member_target_entity);
        }
        {
            TypeIdentifierPair type_ids_entity_position;
            ReturnCode_t return_code_entity_position {eprosima::fastdds::dds::RETCODE_OK};
            return_code_entity_position =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "Position", type_ids_entity_position);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_entity_position)
            {
            ::register_Position_type_identifier(type_ids_entity_position);
            }
            StructMemberFlag member_flags_entity_position = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_entity_position = 0x00000003;
            bool common_entity_position_ec {false};
            CommonStructMember common_entity_position {TypeObjectUtils::build_common_struct_member(member_id_entity_position, member_flags_entity_position, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_entity_position, common_entity_position_ec))};
            if (!common_entity_position_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure entity_position member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_entity_position = "entity_position";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_entity_position;
            ann_custom_AirEntity.reset();
            CompleteMemberDetail detail_entity_position = TypeObjectUtils::build_complete_member_detail(name_entity_position, member_ann_builtin_entity_position, ann_custom_AirEntity);
            CompleteStructMember member_entity_position = TypeObjectUtils::build_complete_struct_member(common_entity_position, detail_entity_position);
            TypeObjectUtils::add_complete_struct_member(member_seq_AirEntity, member_entity_position);
        }
        {
            TypeIdentifierPair type_ids_entity_attitude;
            ReturnCode_t return_code_entity_attitude {eprosima::fastdds::dds::RETCODE_OK};
            return_code_entity_attitude =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "Attitude", type_ids_entity_attitude);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_entity_attitude)
            {
            ::register_Attitude_type_identifier(type_ids_entity_attitude);
            }
            StructMemberFlag member_flags_entity_attitude = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_entity_attitude = 0x00000004;
            bool common_entity_attitude_ec {false};
            CommonStructMember common_entity_attitude {TypeObjectUtils::build_common_struct_member(member_id_entity_attitude, member_flags_entity_attitude, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_entity_attitude, common_entity_attitude_ec))};
            if (!common_entity_attitude_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure entity_attitude member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_entity_attitude = "entity_attitude";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_entity_attitude;
            ann_custom_AirEntity.reset();
            CompleteMemberDetail detail_entity_attitude = TypeObjectUtils::build_complete_member_detail(name_entity_attitude, member_ann_builtin_entity_attitude, ann_custom_AirEntity);
            CompleteStructMember member_entity_attitude = TypeObjectUtils::build_complete_struct_member(common_entity_attitude, detail_entity_attitude);
            TypeObjectUtils::add_complete_struct_member(member_seq_AirEntity, member_entity_attitude);
        }
        {
            TypeIdentifierPair type_ids_movement;
            ReturnCode_t return_code_movement {eprosima::fastdds::dds::RETCODE_OK};
            return_code_movement =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MovementAirEntity", type_ids_movement);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_movement)
            {
            ::register_MovementAirEntity_type_identifier(type_ids_movement);
            }
            StructMemberFlag member_flags_movement = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_movement = 0x00000005;
            bool common_movement_ec {false};
            CommonStructMember common_movement {TypeObjectUtils::build_common_struct_member(member_id_movement, member_flags_movement, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_movement, common_movement_ec))};
            if (!common_movement_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure movement member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_movement = "movement";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_movement;
            ann_custom_AirEntity.reset();
            CompleteMemberDetail detail_movement = TypeObjectUtils::build_complete_member_detail(name_movement, member_ann_builtin_movement, ann_custom_AirEntity);
            CompleteStructMember member_movement = TypeObjectUtils::build_complete_struct_member(common_movement, detail_movement);
            TypeObjectUtils::add_complete_struct_member(member_seq_AirEntity, member_movement);
        }
        {
            TypeIdentifierPair type_ids_commsActive;
            ReturnCode_t return_code_commsActive {eprosima::fastdds::dds::RETCODE_OK};
            return_code_commsActive =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_commsActive);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_commsActive)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "commsActive Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_commsActive = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_commsActive = 0x00000006;
            bool common_commsActive_ec {false};
            CommonStructMember common_commsActive {TypeObjectUtils::build_common_struct_member(member_id_commsActive, member_flags_commsActive, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_commsActive, common_commsActive_ec))};
            if (!common_commsActive_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure commsActive member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_commsActive = "commsActive";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_commsActive;
            ann_custom_AirEntity.reset();
            CompleteMemberDetail detail_commsActive = TypeObjectUtils::build_complete_member_detail(name_commsActive, member_ann_builtin_commsActive, ann_custom_AirEntity);
            CompleteStructMember member_commsActive = TypeObjectUtils::build_complete_struct_member(common_commsActive, detail_commsActive);
            TypeObjectUtils::add_complete_struct_member(member_seq_AirEntity, member_commsActive);
        }
        {
            TypeIdentifierPair type_ids_formationID;
            ReturnCode_t return_code_formationID {eprosima::fastdds::dds::RETCODE_OK};
            return_code_formationID =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_formationID);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_formationID)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "formationID Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_formationID = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_formationID = 0x00000007;
            bool common_formationID_ec {false};
            CommonStructMember common_formationID {TypeObjectUtils::build_common_struct_member(member_id_formationID, member_flags_formationID, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_formationID, common_formationID_ec))};
            if (!common_formationID_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure formationID member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_formationID = "formationID";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_formationID;
            ann_custom_AirEntity.reset();
            CompleteMemberDetail detail_formationID = TypeObjectUtils::build_complete_member_detail(name_formationID, member_ann_builtin_formationID, ann_custom_AirEntity);
            CompleteStructMember member_formationID = TypeObjectUtils::build_complete_struct_member(common_formationID, detail_formationID);
            TypeObjectUtils::add_complete_struct_member(member_seq_AirEntity, member_formationID);
        }
        {
            TypeIdentifierPair type_ids_posInt_inseoFormation;
            ReturnCode_t return_code_posInt_inseoFormation {eprosima::fastdds::dds::RETCODE_OK};
            return_code_posInt_inseoFormation =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_posInt_inseoFormation);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_posInt_inseoFormation)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "posInt_inseoFormation Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_posInt_inseoFormation = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_posInt_inseoFormation = 0x00000008;
            bool common_posInt_inseoFormation_ec {false};
            CommonStructMember common_posInt_inseoFormation {TypeObjectUtils::build_common_struct_member(member_id_posInt_inseoFormation, member_flags_posInt_inseoFormation, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_posInt_inseoFormation, common_posInt_inseoFormation_ec))};
            if (!common_posInt_inseoFormation_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure posInt_inseoFormation member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_posInt_inseoFormation = "posInt_inseoFormation";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_posInt_inseoFormation;
            ann_custom_AirEntity.reset();
            CompleteMemberDetail detail_posInt_inseoFormation = TypeObjectUtils::build_complete_member_detail(name_posInt_inseoFormation, member_ann_builtin_posInt_inseoFormation, ann_custom_AirEntity);
            CompleteStructMember member_posInt_inseoFormation = TypeObjectUtils::build_complete_struct_member(common_posInt_inseoFormation, detail_posInt_inseoFormation);
            TypeObjectUtils::add_complete_struct_member(member_seq_AirEntity, member_posInt_inseoFormation);
        }
        {
            TypeIdentifierPair type_ids_isAutomaticTraffic;
            ReturnCode_t return_code_isAutomaticTraffic {eprosima::fastdds::dds::RETCODE_OK};
            return_code_isAutomaticTraffic =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_isAutomaticTraffic);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_isAutomaticTraffic)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "isAutomaticTraffic Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_isAutomaticTraffic = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_isAutomaticTraffic = 0x00000009;
            bool common_isAutomaticTraffic_ec {false};
            CommonStructMember common_isAutomaticTraffic {TypeObjectUtils::build_common_struct_member(member_id_isAutomaticTraffic, member_flags_isAutomaticTraffic, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_isAutomaticTraffic, common_isAutomaticTraffic_ec))};
            if (!common_isAutomaticTraffic_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure isAutomaticTraffic member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_isAutomaticTraffic = "isAutomaticTraffic";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_isAutomaticTraffic;
            ann_custom_AirEntity.reset();
            CompleteMemberDetail detail_isAutomaticTraffic = TypeObjectUtils::build_complete_member_detail(name_isAutomaticTraffic, member_ann_builtin_isAutomaticTraffic, ann_custom_AirEntity);
            CompleteStructMember member_isAutomaticTraffic = TypeObjectUtils::build_complete_struct_member(common_isAutomaticTraffic, detail_isAutomaticTraffic);
            TypeObjectUtils::add_complete_struct_member(member_seq_AirEntity, member_isAutomaticTraffic);
        }
        CompleteStructType struct_type_AirEntity = TypeObjectUtils::build_complete_struct_type(struct_flags_AirEntity, header_AirEntity, member_seq_AirEntity);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_AirEntity, type_name_AirEntity.to_string(), type_ids_AirEntity))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "AirEntity already registered in TypeObjectRegistry for a different type.");
        }
    }
}
