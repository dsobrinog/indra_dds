// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file test_controlTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#include "test_controlTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>
#include "test_control.hpp"


using namespace eprosima::fastdds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_TestControl_type_identifier(
        TypeIdentifierPair& type_ids_TestControl)
{

    ReturnCode_t return_code_TestControl {eprosima::fastdds::dds::RETCODE_OK};
    return_code_TestControl =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "TestControl", type_ids_TestControl);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_TestControl)
    {
        StructTypeFlag struct_flags_TestControl = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_TestControl = "TestControl";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_TestControl;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_TestControl;
        CompleteTypeDetail detail_TestControl = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_TestControl, ann_custom_TestControl, type_name_TestControl.to_string());
        CompleteStructHeader header_TestControl;
        header_TestControl = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_TestControl);
        CompleteStructMemberSeq member_seq_TestControl;
        {
            TypeIdentifierPair type_ids_test_id;
            ReturnCode_t return_code_test_id {eprosima::fastdds::dds::RETCODE_OK};
            return_code_test_id =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_test_id);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_test_id)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "test_id Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_test_id = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, true, false);
            MemberId member_id_test_id = 0x00000000;
            bool common_test_id_ec {false};
            CommonStructMember common_test_id {TypeObjectUtils::build_common_struct_member(member_id_test_id, member_flags_test_id, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_test_id, common_test_id_ec))};
            if (!common_test_id_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure test_id member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_test_id = "test_id";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_test_id;
            ann_custom_TestControl.reset();
            AppliedAnnotationSeq tmp_ann_custom_test_id;
            eprosima::fastcdr::optional<std::string> unit_test_id;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_test_id;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_test_id;
            eprosima::fastcdr::optional<std::string> hash_id_test_id;
            if (unit_test_id.has_value() || min_test_id.has_value() || max_test_id.has_value() || hash_id_test_id.has_value())
            {
                member_ann_builtin_test_id = TypeObjectUtils::build_applied_builtin_member_annotations(unit_test_id, min_test_id, max_test_id, hash_id_test_id);
            }
            if (!tmp_ann_custom_test_id.empty())
            {
                ann_custom_TestControl = tmp_ann_custom_test_id;
            }
            CompleteMemberDetail detail_test_id = TypeObjectUtils::build_complete_member_detail(name_test_id, member_ann_builtin_test_id, ann_custom_TestControl);
            CompleteStructMember member_test_id = TypeObjectUtils::build_complete_struct_member(common_test_id, detail_test_id);
            TypeObjectUtils::add_complete_struct_member(member_seq_TestControl, member_test_id);
        }
        {
            TypeIdentifierPair type_ids_start;
            ReturnCode_t return_code_start {eprosima::fastdds::dds::RETCODE_OK};
            return_code_start =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_start);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_start)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "start Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_start = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_start = 0x00000001;
            bool common_start_ec {false};
            CommonStructMember common_start {TypeObjectUtils::build_common_struct_member(member_id_start, member_flags_start, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_start, common_start_ec))};
            if (!common_start_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure start member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_start = "start";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_start;
            ann_custom_TestControl.reset();
            CompleteMemberDetail detail_start = TypeObjectUtils::build_complete_member_detail(name_start, member_ann_builtin_start, ann_custom_TestControl);
            CompleteStructMember member_start = TypeObjectUtils::build_complete_struct_member(common_start, detail_start);
            TypeObjectUtils::add_complete_struct_member(member_seq_TestControl, member_start);
        }
        {
            TypeIdentifierPair type_ids_expected_entities;
            ReturnCode_t return_code_expected_entities {eprosima::fastdds::dds::RETCODE_OK};
            return_code_expected_entities =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_expected_entities);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_expected_entities)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "expected_entities Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_expected_entities = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_expected_entities = 0x00000002;
            bool common_expected_entities_ec {false};
            CommonStructMember common_expected_entities {TypeObjectUtils::build_common_struct_member(member_id_expected_entities, member_flags_expected_entities, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_expected_entities, common_expected_entities_ec))};
            if (!common_expected_entities_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure expected_entities member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_expected_entities = "expected_entities";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_expected_entities;
            ann_custom_TestControl.reset();
            CompleteMemberDetail detail_expected_entities = TypeObjectUtils::build_complete_member_detail(name_expected_entities, member_ann_builtin_expected_entities, ann_custom_TestControl);
            CompleteStructMember member_expected_entities = TypeObjectUtils::build_complete_struct_member(common_expected_entities, detail_expected_entities);
            TypeObjectUtils::add_complete_struct_member(member_seq_TestControl, member_expected_entities);
        }
        {
            TypeIdentifierPair type_ids_cycle_time_ms;
            ReturnCode_t return_code_cycle_time_ms {eprosima::fastdds::dds::RETCODE_OK};
            return_code_cycle_time_ms =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_cycle_time_ms);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_cycle_time_ms)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "cycle_time_ms Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_cycle_time_ms = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_cycle_time_ms = 0x00000003;
            bool common_cycle_time_ms_ec {false};
            CommonStructMember common_cycle_time_ms {TypeObjectUtils::build_common_struct_member(member_id_cycle_time_ms, member_flags_cycle_time_ms, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_cycle_time_ms, common_cycle_time_ms_ec))};
            if (!common_cycle_time_ms_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure cycle_time_ms member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_cycle_time_ms = "cycle_time_ms";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_cycle_time_ms;
            ann_custom_TestControl.reset();
            CompleteMemberDetail detail_cycle_time_ms = TypeObjectUtils::build_complete_member_detail(name_cycle_time_ms, member_ann_builtin_cycle_time_ms, ann_custom_TestControl);
            CompleteStructMember member_cycle_time_ms = TypeObjectUtils::build_complete_struct_member(common_cycle_time_ms, detail_cycle_time_ms);
            TypeObjectUtils::add_complete_struct_member(member_seq_TestControl, member_cycle_time_ms);
        }
        {
            TypeIdentifierPair type_ids_reserve1;
            ReturnCode_t return_code_reserve1 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_reserve1 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_reserve1);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_reserve1)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "reserve1 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_reserve1 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_reserve1 = 0x00000004;
            bool common_reserve1_ec {false};
            CommonStructMember common_reserve1 {TypeObjectUtils::build_common_struct_member(member_id_reserve1, member_flags_reserve1, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_reserve1, common_reserve1_ec))};
            if (!common_reserve1_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure reserve1 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_reserve1 = "reserve1";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_reserve1;
            ann_custom_TestControl.reset();
            CompleteMemberDetail detail_reserve1 = TypeObjectUtils::build_complete_member_detail(name_reserve1, member_ann_builtin_reserve1, ann_custom_TestControl);
            CompleteStructMember member_reserve1 = TypeObjectUtils::build_complete_struct_member(common_reserve1, detail_reserve1);
            TypeObjectUtils::add_complete_struct_member(member_seq_TestControl, member_reserve1);
        }
        {
            TypeIdentifierPair type_ids_reserve2;
            ReturnCode_t return_code_reserve2 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_reserve2 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_reserve2);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_reserve2)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "reserve2 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_reserve2 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_reserve2 = 0x00000005;
            bool common_reserve2_ec {false};
            CommonStructMember common_reserve2 {TypeObjectUtils::build_common_struct_member(member_id_reserve2, member_flags_reserve2, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_reserve2, common_reserve2_ec))};
            if (!common_reserve2_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure reserve2 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_reserve2 = "reserve2";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_reserve2;
            ann_custom_TestControl.reset();
            CompleteMemberDetail detail_reserve2 = TypeObjectUtils::build_complete_member_detail(name_reserve2, member_ann_builtin_reserve2, ann_custom_TestControl);
            CompleteStructMember member_reserve2 = TypeObjectUtils::build_complete_struct_member(common_reserve2, detail_reserve2);
            TypeObjectUtils::add_complete_struct_member(member_seq_TestControl, member_reserve2);
        }
        CompleteStructType struct_type_TestControl = TypeObjectUtils::build_complete_struct_type(struct_flags_TestControl, header_TestControl, member_seq_TestControl);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_TestControl, type_name_TestControl.to_string(), type_ids_TestControl))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "TestControl already registered in TypeObjectRegistry for a different type.");
        }
    }
}
