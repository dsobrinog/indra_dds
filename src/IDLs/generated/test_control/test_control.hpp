// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file test_control.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#ifndef FAST_DDS_GENERATED__TEST_CONTROL_HPP
#define FAST_DDS_GENERATED__TEST_CONTROL_HPP

#include <cstdint>
#include <utility>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(TEST_CONTROL_SOURCE)
#define TEST_CONTROL_DllAPI __declspec( dllexport )
#else
#define TEST_CONTROL_DllAPI __declspec( dllimport )
#endif // TEST_CONTROL_SOURCE
#else
#define TEST_CONTROL_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define TEST_CONTROL_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure TestControl defined by the user in the IDL file.
 * @ingroup test_control
 */
class TestControl
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TestControl()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TestControl()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TestControl that will be copied.
     */
    eProsima_user_DllExport TestControl(
            const TestControl& x)
    {
                    m_test_id = x.m_test_id;

                    m_start = x.m_start;

                    m_expected_entities = x.m_expected_entities;

                    m_cycle_time_ms = x.m_cycle_time_ms;

                    m_reserve1 = x.m_reserve1;

                    m_reserve2 = x.m_reserve2;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TestControl that will be copied.
     */
    eProsima_user_DllExport TestControl(
            TestControl&& x) noexcept
    {
        m_test_id = x.m_test_id;
        m_start = x.m_start;
        m_expected_entities = x.m_expected_entities;
        m_cycle_time_ms = x.m_cycle_time_ms;
        m_reserve1 = x.m_reserve1;
        m_reserve2 = x.m_reserve2;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TestControl that will be copied.
     */
    eProsima_user_DllExport TestControl& operator =(
            const TestControl& x)
    {

                    m_test_id = x.m_test_id;

                    m_start = x.m_start;

                    m_expected_entities = x.m_expected_entities;

                    m_cycle_time_ms = x.m_cycle_time_ms;

                    m_reserve1 = x.m_reserve1;

                    m_reserve2 = x.m_reserve2;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TestControl that will be copied.
     */
    eProsima_user_DllExport TestControl& operator =(
            TestControl&& x) noexcept
    {

        m_test_id = x.m_test_id;
        m_start = x.m_start;
        m_expected_entities = x.m_expected_entities;
        m_cycle_time_ms = x.m_cycle_time_ms;
        m_reserve1 = x.m_reserve1;
        m_reserve2 = x.m_reserve2;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x TestControl object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const TestControl& x) const
    {
        return (m_test_id == x.m_test_id &&
           m_start == x.m_start &&
           m_expected_entities == x.m_expected_entities &&
           m_cycle_time_ms == x.m_cycle_time_ms &&
           m_reserve1 == x.m_reserve1 &&
           m_reserve2 == x.m_reserve2);
    }

    /*!
     * @brief Comparison operator.
     * @param x TestControl object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const TestControl& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member test_id
     * @param _test_id New value for member test_id
     */
    eProsima_user_DllExport void test_id(
            int32_t _test_id)
    {
        m_test_id = _test_id;
    }

    /*!
     * @brief This function returns the value of member test_id
     * @return Value of member test_id
     */
    eProsima_user_DllExport int32_t test_id() const
    {
        return m_test_id;
    }

    /*!
     * @brief This function returns a reference to member test_id
     * @return Reference to member test_id
     */
    eProsima_user_DllExport int32_t& test_id()
    {
        return m_test_id;
    }


    /*!
     * @brief This function sets a value in member start
     * @param _start New value for member start
     */
    eProsima_user_DllExport void start(
            bool _start)
    {
        m_start = _start;
    }

    /*!
     * @brief This function returns the value of member start
     * @return Value of member start
     */
    eProsima_user_DllExport bool start() const
    {
        return m_start;
    }

    /*!
     * @brief This function returns a reference to member start
     * @return Reference to member start
     */
    eProsima_user_DllExport bool& start()
    {
        return m_start;
    }


    /*!
     * @brief This function sets a value in member expected_entities
     * @param _expected_entities New value for member expected_entities
     */
    eProsima_user_DllExport void expected_entities(
            int32_t _expected_entities)
    {
        m_expected_entities = _expected_entities;
    }

    /*!
     * @brief This function returns the value of member expected_entities
     * @return Value of member expected_entities
     */
    eProsima_user_DllExport int32_t expected_entities() const
    {
        return m_expected_entities;
    }

    /*!
     * @brief This function returns a reference to member expected_entities
     * @return Reference to member expected_entities
     */
    eProsima_user_DllExport int32_t& expected_entities()
    {
        return m_expected_entities;
    }


    /*!
     * @brief This function sets a value in member cycle_time_ms
     * @param _cycle_time_ms New value for member cycle_time_ms
     */
    eProsima_user_DllExport void cycle_time_ms(
            int32_t _cycle_time_ms)
    {
        m_cycle_time_ms = _cycle_time_ms;
    }

    /*!
     * @brief This function returns the value of member cycle_time_ms
     * @return Value of member cycle_time_ms
     */
    eProsima_user_DllExport int32_t cycle_time_ms() const
    {
        return m_cycle_time_ms;
    }

    /*!
     * @brief This function returns a reference to member cycle_time_ms
     * @return Reference to member cycle_time_ms
     */
    eProsima_user_DllExport int32_t& cycle_time_ms()
    {
        return m_cycle_time_ms;
    }


    /*!
     * @brief This function sets a value in member reserve1
     * @param _reserve1 New value for member reserve1
     */
    eProsima_user_DllExport void reserve1(
            int32_t _reserve1)
    {
        m_reserve1 = _reserve1;
    }

    /*!
     * @brief This function returns the value of member reserve1
     * @return Value of member reserve1
     */
    eProsima_user_DllExport int32_t reserve1() const
    {
        return m_reserve1;
    }

    /*!
     * @brief This function returns a reference to member reserve1
     * @return Reference to member reserve1
     */
    eProsima_user_DllExport int32_t& reserve1()
    {
        return m_reserve1;
    }


    /*!
     * @brief This function sets a value in member reserve2
     * @param _reserve2 New value for member reserve2
     */
    eProsima_user_DllExport void reserve2(
            int32_t _reserve2)
    {
        m_reserve2 = _reserve2;
    }

    /*!
     * @brief This function returns the value of member reserve2
     * @return Value of member reserve2
     */
    eProsima_user_DllExport int32_t reserve2() const
    {
        return m_reserve2;
    }

    /*!
     * @brief This function returns a reference to member reserve2
     * @return Reference to member reserve2
     */
    eProsima_user_DllExport int32_t& reserve2()
    {
        return m_reserve2;
    }



private:

    int32_t m_test_id{0};
    bool m_start{false};
    int32_t m_expected_entities{0};
    int32_t m_cycle_time_ms{0};
    int32_t m_reserve1{0};
    int32_t m_reserve2{0};

};

#endif // _FAST_DDS_GENERATED_TEST_CONTROL_HPP_


