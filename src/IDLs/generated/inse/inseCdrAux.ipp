// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file inseCdrAux.ipp
 * This source file contains some declarations of CDR related functions.
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#ifndef FAST_DDS_GENERATED__INSECDRAUX_IPP
#define FAST_DDS_GENERATED__INSECDRAUX_IPP

#include "inseCdrAux.hpp"

#include <fastcdr/Cdr.h>
#include <fastcdr/CdrSizeCalculator.hpp>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

namespace eprosima {
namespace fastcdr {

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const EntityID& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.id(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.creatorID(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.entityName(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.modelName(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(4),
                data.visualID(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(5),
                data.visualModel(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(6),
                data.visualDetail(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(7),
                data.active(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(8),
                data.delayedActivationTime(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(9),
                data.manned(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(10),
                data.remote(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(11),
                data.entityType(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(12),
                data.side(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(13),
                data.weight(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const EntityID& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.id()
        << eprosima::fastcdr::MemberId(1) << data.creatorID()
        << eprosima::fastcdr::MemberId(2) << data.entityName()
        << eprosima::fastcdr::MemberId(3) << data.modelName()
        << eprosima::fastcdr::MemberId(4) << data.visualID()
        << eprosima::fastcdr::MemberId(5) << data.visualModel()
        << eprosima::fastcdr::MemberId(6) << data.visualDetail()
        << eprosima::fastcdr::MemberId(7) << data.active()
        << eprosima::fastcdr::MemberId(8) << data.delayedActivationTime()
        << eprosima::fastcdr::MemberId(9) << data.manned()
        << eprosima::fastcdr::MemberId(10) << data.remote()
        << eprosima::fastcdr::MemberId(11) << data.entityType()
        << eprosima::fastcdr::MemberId(12) << data.side()
        << eprosima::fastcdr::MemberId(13) << data.weight()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        EntityID& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.id();
                                            break;

                                        case 1:
                                                dcdr >> data.creatorID();
                                            break;

                                        case 2:
                                                dcdr >> data.entityName();
                                            break;

                                        case 3:
                                                dcdr >> data.modelName();
                                            break;

                                        case 4:
                                                dcdr >> data.visualID();
                                            break;

                                        case 5:
                                                dcdr >> data.visualModel();
                                            break;

                                        case 6:
                                                dcdr >> data.visualDetail();
                                            break;

                                        case 7:
                                                dcdr >> data.active();
                                            break;

                                        case 8:
                                                dcdr >> data.delayedActivationTime();
                                            break;

                                        case 9:
                                                dcdr >> data.manned();
                                            break;

                                        case 10:
                                                dcdr >> data.remote();
                                            break;

                                        case 11:
                                                dcdr >> data.entityType();
                                            break;

                                        case 12:
                                                dcdr >> data.side();
                                            break;

                                        case 13:
                                                dcdr >> data.weight();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const EntityID& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.id();

                        scdr << data.creatorID();

                        scdr << data.entityName();

                        scdr << data.modelName();

                        scdr << data.visualID();

                        scdr << data.visualModel();

                        scdr << data.visualDetail();

                        scdr << data.active();

                        scdr << data.delayedActivationTime();

                        scdr << data.manned();

                        scdr << data.remote();

                        scdr << data.entityType();

                        scdr << data.side();

                        scdr << data.weight();

}


template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const Target& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.entity_id(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const Target& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.entity_id()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        Target& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.entity_id();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const Target& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.entity_id();

}


template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const Position& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.latitude(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.longitude(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.altitude(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.altitudeAGL(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(4),
                data.altitude_target(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const Position& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.latitude()
        << eprosima::fastcdr::MemberId(1) << data.longitude()
        << eprosima::fastcdr::MemberId(2) << data.altitude()
        << eprosima::fastcdr::MemberId(3) << data.altitudeAGL()
        << eprosima::fastcdr::MemberId(4) << data.altitude_target()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        Position& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.latitude();
                                            break;

                                        case 1:
                                                dcdr >> data.longitude();
                                            break;

                                        case 2:
                                                dcdr >> data.altitude();
                                            break;

                                        case 3:
                                                dcdr >> data.altitudeAGL();
                                            break;

                                        case 4:
                                                dcdr >> data.altitude_target();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const Position& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.latitude();

                        scdr << data.longitude();

                        scdr << data.altitude();

                        scdr << data.altitudeAGL();

                        scdr << data.altitude_target();

}


template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const Attitude& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.pitch(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.yaw(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.roll(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const Attitude& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.pitch()
        << eprosima::fastcdr::MemberId(1) << data.yaw()
        << eprosima::fastcdr::MemberId(2) << data.roll()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        Attitude& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.pitch();
                                            break;

                                        case 1:
                                                dcdr >> data.yaw();
                                            break;

                                        case 2:
                                                dcdr >> data.roll();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const Attitude& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.pitch();

                        scdr << data.yaw();

                        scdr << data.roll();

}


template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const MovementAirEntity& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.speed(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.speed_target(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.geographicHeading(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.geographicHeading_target(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(4),
                data.magneticHeading(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(5),
                data.tmllf(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(6),
                data.onGround(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(7),
                data.missionName(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(8),
                data.indicatedSpeed(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(9),
                data.indicatedSpeed_target(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(10),
                data.loadFactor(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(11),
                data.verticalSpeed(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(12),
                data.verticalSpeed_target(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(13),
                data.groundSpeed(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(14),
                data.groundSpeed_target(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(15),
                data.throttle(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(16),
                data.infiniteFuel(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(17),
                data.initialFuel(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(18),
                data.currentFuel(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(19),
                data.fuelConsumption(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const MovementAirEntity& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.speed()
        << eprosima::fastcdr::MemberId(1) << data.speed_target()
        << eprosima::fastcdr::MemberId(2) << data.geographicHeading()
        << eprosima::fastcdr::MemberId(3) << data.geographicHeading_target()
        << eprosima::fastcdr::MemberId(4) << data.magneticHeading()
        << eprosima::fastcdr::MemberId(5) << data.tmllf()
        << eprosima::fastcdr::MemberId(6) << data.onGround()
        << eprosima::fastcdr::MemberId(7) << data.missionName()
        << eprosima::fastcdr::MemberId(8) << data.indicatedSpeed()
        << eprosima::fastcdr::MemberId(9) << data.indicatedSpeed_target()
        << eprosima::fastcdr::MemberId(10) << data.loadFactor()
        << eprosima::fastcdr::MemberId(11) << data.verticalSpeed()
        << eprosima::fastcdr::MemberId(12) << data.verticalSpeed_target()
        << eprosima::fastcdr::MemberId(13) << data.groundSpeed()
        << eprosima::fastcdr::MemberId(14) << data.groundSpeed_target()
        << eprosima::fastcdr::MemberId(15) << data.throttle()
        << eprosima::fastcdr::MemberId(16) << data.infiniteFuel()
        << eprosima::fastcdr::MemberId(17) << data.initialFuel()
        << eprosima::fastcdr::MemberId(18) << data.currentFuel()
        << eprosima::fastcdr::MemberId(19) << data.fuelConsumption()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        MovementAirEntity& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.speed();
                                            break;

                                        case 1:
                                                dcdr >> data.speed_target();
                                            break;

                                        case 2:
                                                dcdr >> data.geographicHeading();
                                            break;

                                        case 3:
                                                dcdr >> data.geographicHeading_target();
                                            break;

                                        case 4:
                                                dcdr >> data.magneticHeading();
                                            break;

                                        case 5:
                                                dcdr >> data.tmllf();
                                            break;

                                        case 6:
                                                dcdr >> data.onGround();
                                            break;

                                        case 7:
                                                dcdr >> data.missionName();
                                            break;

                                        case 8:
                                                dcdr >> data.indicatedSpeed();
                                            break;

                                        case 9:
                                                dcdr >> data.indicatedSpeed_target();
                                            break;

                                        case 10:
                                                dcdr >> data.loadFactor();
                                            break;

                                        case 11:
                                                dcdr >> data.verticalSpeed();
                                            break;

                                        case 12:
                                                dcdr >> data.verticalSpeed_target();
                                            break;

                                        case 13:
                                                dcdr >> data.groundSpeed();
                                            break;

                                        case 14:
                                                dcdr >> data.groundSpeed_target();
                                            break;

                                        case 15:
                                                dcdr >> data.throttle();
                                            break;

                                        case 16:
                                                dcdr >> data.infiniteFuel();
                                            break;

                                        case 17:
                                                dcdr >> data.initialFuel();
                                            break;

                                        case 18:
                                                dcdr >> data.currentFuel();
                                            break;

                                        case 19:
                                                dcdr >> data.fuelConsumption();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const MovementAirEntity& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.speed();

                        scdr << data.speed_target();

                        scdr << data.geographicHeading();

                        scdr << data.geographicHeading_target();

                        scdr << data.magneticHeading();

                        scdr << data.tmllf();

                        scdr << data.onGround();

                        scdr << data.missionName();

                        scdr << data.indicatedSpeed();

                        scdr << data.indicatedSpeed_target();

                        scdr << data.loadFactor();

                        scdr << data.verticalSpeed();

                        scdr << data.verticalSpeed_target();

                        scdr << data.groundSpeed();

                        scdr << data.groundSpeed_target();

                        scdr << data.throttle();

                        scdr << data.infiniteFuel();

                        scdr << data.initialFuel();

                        scdr << data.currentFuel();

                        scdr << data.fuelConsumption();

}


template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const AirEntity& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.id(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.entity_attitude(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.movement(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.commsActive(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(4),
                data.formationID(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(5),
                data.posInt_inseoFormation(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(6),
                data.isAutomaticTraffic(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const AirEntity& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.id()
        << eprosima::fastcdr::MemberId(1) << data.entity_attitude()
        << eprosima::fastcdr::MemberId(2) << data.movement()
        << eprosima::fastcdr::MemberId(3) << data.commsActive()
        << eprosima::fastcdr::MemberId(4) << data.formationID()
        << eprosima::fastcdr::MemberId(5) << data.posInt_inseoFormation()
        << eprosima::fastcdr::MemberId(6) << data.isAutomaticTraffic()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        AirEntity& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.id();
                                            break;

                                        case 1:
                                                dcdr >> data.entity_attitude();
                                            break;

                                        case 2:
                                                dcdr >> data.movement();
                                            break;

                                        case 3:
                                                dcdr >> data.commsActive();
                                            break;

                                        case 4:
                                                dcdr >> data.formationID();
                                            break;

                                        case 5:
                                                dcdr >> data.posInt_inseoFormation();
                                            break;

                                        case 6:
                                                dcdr >> data.isAutomaticTraffic();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const AirEntity& data)
{
            extern void serialize_key(
                    Cdr& scdr,
                    const Attitude& data);

            extern void serialize_key(
                    Cdr& scdr,
                    const MovementAirEntity& data);






    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.id();







}



} // namespace fastcdr
} // namespace eprosima

#endif // FAST_DDS_GENERATED__INSECDRAUX_IPP

