// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file inse.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#ifndef FAST_DDS_GENERATED__INSE_HPP
#define FAST_DDS_GENERATED__INSE_HPP

#include <array>
#include <cstdint>
#include <utility>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(INSE_SOURCE)
#define INSE_DllAPI __declspec( dllexport )
#else
#define INSE_DllAPI __declspec( dllimport )
#endif // INSE_SOURCE
#else
#define INSE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define INSE_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure EntityID defined by the user in the IDL file.
 * @ingroup inse
 */
class EntityID
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport EntityID()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~EntityID()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object EntityID that will be copied.
     */
    eProsima_user_DllExport EntityID(
            const EntityID& x)
    {
                    m_id = x.m_id;

                    m_creatorID = x.m_creatorID;

                    m_entityName = x.m_entityName;

                    m_modelName = x.m_modelName;

                    m_visualID = x.m_visualID;

                    m_visualModel = x.m_visualModel;

                    m_visualDetail = x.m_visualDetail;

                    m_active = x.m_active;

                    m_delayedActivationTime = x.m_delayedActivationTime;

                    m_manned = x.m_manned;

                    m_remote = x.m_remote;

                    m_entityType = x.m_entityType;

                    m_side = x.m_side;

                    m_weight = x.m_weight;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object EntityID that will be copied.
     */
    eProsima_user_DllExport EntityID(
            EntityID&& x) noexcept
    {
        m_id = x.m_id;
        m_creatorID = x.m_creatorID;
        m_entityName = std::move(x.m_entityName);
        m_modelName = std::move(x.m_modelName);
        m_visualID = x.m_visualID;
        m_visualModel = x.m_visualModel;
        m_visualDetail = x.m_visualDetail;
        m_active = x.m_active;
        m_delayedActivationTime = x.m_delayedActivationTime;
        m_manned = x.m_manned;
        m_remote = x.m_remote;
        m_entityType = x.m_entityType;
        m_side = x.m_side;
        m_weight = x.m_weight;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object EntityID that will be copied.
     */
    eProsima_user_DllExport EntityID& operator =(
            const EntityID& x)
    {

                    m_id = x.m_id;

                    m_creatorID = x.m_creatorID;

                    m_entityName = x.m_entityName;

                    m_modelName = x.m_modelName;

                    m_visualID = x.m_visualID;

                    m_visualModel = x.m_visualModel;

                    m_visualDetail = x.m_visualDetail;

                    m_active = x.m_active;

                    m_delayedActivationTime = x.m_delayedActivationTime;

                    m_manned = x.m_manned;

                    m_remote = x.m_remote;

                    m_entityType = x.m_entityType;

                    m_side = x.m_side;

                    m_weight = x.m_weight;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object EntityID that will be copied.
     */
    eProsima_user_DllExport EntityID& operator =(
            EntityID&& x) noexcept
    {

        m_id = x.m_id;
        m_creatorID = x.m_creatorID;
        m_entityName = std::move(x.m_entityName);
        m_modelName = std::move(x.m_modelName);
        m_visualID = x.m_visualID;
        m_visualModel = x.m_visualModel;
        m_visualDetail = x.m_visualDetail;
        m_active = x.m_active;
        m_delayedActivationTime = x.m_delayedActivationTime;
        m_manned = x.m_manned;
        m_remote = x.m_remote;
        m_entityType = x.m_entityType;
        m_side = x.m_side;
        m_weight = x.m_weight;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x EntityID object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const EntityID& x) const
    {
        return (m_id == x.m_id &&
           m_creatorID == x.m_creatorID &&
           m_entityName == x.m_entityName &&
           m_modelName == x.m_modelName &&
           m_visualID == x.m_visualID &&
           m_visualModel == x.m_visualModel &&
           m_visualDetail == x.m_visualDetail &&
           m_active == x.m_active &&
           m_delayedActivationTime == x.m_delayedActivationTime &&
           m_manned == x.m_manned &&
           m_remote == x.m_remote &&
           m_entityType == x.m_entityType &&
           m_side == x.m_side &&
           m_weight == x.m_weight);
    }

    /*!
     * @brief Comparison operator.
     * @param x EntityID object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const EntityID& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(
            int32_t _id)
    {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport int32_t id() const
    {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport int32_t& id()
    {
        return m_id;
    }


    /*!
     * @brief This function sets a value in member creatorID
     * @param _creatorID New value for member creatorID
     */
    eProsima_user_DllExport void creatorID(
            int32_t _creatorID)
    {
        m_creatorID = _creatorID;
    }

    /*!
     * @brief This function returns the value of member creatorID
     * @return Value of member creatorID
     */
    eProsima_user_DllExport int32_t creatorID() const
    {
        return m_creatorID;
    }

    /*!
     * @brief This function returns a reference to member creatorID
     * @return Reference to member creatorID
     */
    eProsima_user_DllExport int32_t& creatorID()
    {
        return m_creatorID;
    }


    /*!
     * @brief This function copies the value in member entityName
     * @param _entityName New value to be copied in member entityName
     */
    eProsima_user_DllExport void entityName(
            const std::array<char, 20>& _entityName)
    {
        m_entityName = _entityName;
    }

    /*!
     * @brief This function moves the value in member entityName
     * @param _entityName New value to be moved in member entityName
     */
    eProsima_user_DllExport void entityName(
            std::array<char, 20>&& _entityName)
    {
        m_entityName = std::move(_entityName);
    }

    /*!
     * @brief This function returns a constant reference to member entityName
     * @return Constant reference to member entityName
     */
    eProsima_user_DllExport const std::array<char, 20>& entityName() const
    {
        return m_entityName;
    }

    /*!
     * @brief This function returns a reference to member entityName
     * @return Reference to member entityName
     */
    eProsima_user_DllExport std::array<char, 20>& entityName()
    {
        return m_entityName;
    }


    /*!
     * @brief This function copies the value in member modelName
     * @param _modelName New value to be copied in member modelName
     */
    eProsima_user_DllExport void modelName(
            const std::array<char, 20>& _modelName)
    {
        m_modelName = _modelName;
    }

    /*!
     * @brief This function moves the value in member modelName
     * @param _modelName New value to be moved in member modelName
     */
    eProsima_user_DllExport void modelName(
            std::array<char, 20>&& _modelName)
    {
        m_modelName = std::move(_modelName);
    }

    /*!
     * @brief This function returns a constant reference to member modelName
     * @return Constant reference to member modelName
     */
    eProsima_user_DllExport const std::array<char, 20>& modelName() const
    {
        return m_modelName;
    }

    /*!
     * @brief This function returns a reference to member modelName
     * @return Reference to member modelName
     */
    eProsima_user_DllExport std::array<char, 20>& modelName()
    {
        return m_modelName;
    }


    /*!
     * @brief This function sets a value in member visualID
     * @param _visualID New value for member visualID
     */
    eProsima_user_DllExport void visualID(
            int32_t _visualID)
    {
        m_visualID = _visualID;
    }

    /*!
     * @brief This function returns the value of member visualID
     * @return Value of member visualID
     */
    eProsima_user_DllExport int32_t visualID() const
    {
        return m_visualID;
    }

    /*!
     * @brief This function returns a reference to member visualID
     * @return Reference to member visualID
     */
    eProsima_user_DllExport int32_t& visualID()
    {
        return m_visualID;
    }


    /*!
     * @brief This function sets a value in member visualModel
     * @param _visualModel New value for member visualModel
     */
    eProsima_user_DllExport void visualModel(
            int32_t _visualModel)
    {
        m_visualModel = _visualModel;
    }

    /*!
     * @brief This function returns the value of member visualModel
     * @return Value of member visualModel
     */
    eProsima_user_DllExport int32_t visualModel() const
    {
        return m_visualModel;
    }

    /*!
     * @brief This function returns a reference to member visualModel
     * @return Reference to member visualModel
     */
    eProsima_user_DllExport int32_t& visualModel()
    {
        return m_visualModel;
    }


    /*!
     * @brief This function sets a value in member visualDetail
     * @param _visualDetail New value for member visualDetail
     */
    eProsima_user_DllExport void visualDetail(
            int32_t _visualDetail)
    {
        m_visualDetail = _visualDetail;
    }

    /*!
     * @brief This function returns the value of member visualDetail
     * @return Value of member visualDetail
     */
    eProsima_user_DllExport int32_t visualDetail() const
    {
        return m_visualDetail;
    }

    /*!
     * @brief This function returns a reference to member visualDetail
     * @return Reference to member visualDetail
     */
    eProsima_user_DllExport int32_t& visualDetail()
    {
        return m_visualDetail;
    }


    /*!
     * @brief This function sets a value in member active
     * @param _active New value for member active
     */
    eProsima_user_DllExport void active(
            char _active)
    {
        m_active = _active;
    }

    /*!
     * @brief This function returns the value of member active
     * @return Value of member active
     */
    eProsima_user_DllExport char active() const
    {
        return m_active;
    }

    /*!
     * @brief This function returns a reference to member active
     * @return Reference to member active
     */
    eProsima_user_DllExport char& active()
    {
        return m_active;
    }


    /*!
     * @brief This function sets a value in member delayedActivationTime
     * @param _delayedActivationTime New value for member delayedActivationTime
     */
    eProsima_user_DllExport void delayedActivationTime(
            uint32_t _delayedActivationTime)
    {
        m_delayedActivationTime = _delayedActivationTime;
    }

    /*!
     * @brief This function returns the value of member delayedActivationTime
     * @return Value of member delayedActivationTime
     */
    eProsima_user_DllExport uint32_t delayedActivationTime() const
    {
        return m_delayedActivationTime;
    }

    /*!
     * @brief This function returns a reference to member delayedActivationTime
     * @return Reference to member delayedActivationTime
     */
    eProsima_user_DllExport uint32_t& delayedActivationTime()
    {
        return m_delayedActivationTime;
    }


    /*!
     * @brief This function sets a value in member manned
     * @param _manned New value for member manned
     */
    eProsima_user_DllExport void manned(
            char _manned)
    {
        m_manned = _manned;
    }

    /*!
     * @brief This function returns the value of member manned
     * @return Value of member manned
     */
    eProsima_user_DllExport char manned() const
    {
        return m_manned;
    }

    /*!
     * @brief This function returns a reference to member manned
     * @return Reference to member manned
     */
    eProsima_user_DllExport char& manned()
    {
        return m_manned;
    }


    /*!
     * @brief This function sets a value in member remote
     * @param _remote New value for member remote
     */
    eProsima_user_DllExport void remote(
            char _remote)
    {
        m_remote = _remote;
    }

    /*!
     * @brief This function returns the value of member remote
     * @return Value of member remote
     */
    eProsima_user_DllExport char remote() const
    {
        return m_remote;
    }

    /*!
     * @brief This function returns a reference to member remote
     * @return Reference to member remote
     */
    eProsima_user_DllExport char& remote()
    {
        return m_remote;
    }


    /*!
     * @brief This function sets a value in member entityType
     * @param _entityType New value for member entityType
     */
    eProsima_user_DllExport void entityType(
            char _entityType)
    {
        m_entityType = _entityType;
    }

    /*!
     * @brief This function returns the value of member entityType
     * @return Value of member entityType
     */
    eProsima_user_DllExport char entityType() const
    {
        return m_entityType;
    }

    /*!
     * @brief This function returns a reference to member entityType
     * @return Reference to member entityType
     */
    eProsima_user_DllExport char& entityType()
    {
        return m_entityType;
    }


    /*!
     * @brief This function sets a value in member side
     * @param _side New value for member side
     */
    eProsima_user_DllExport void side(
            char _side)
    {
        m_side = _side;
    }

    /*!
     * @brief This function returns the value of member side
     * @return Value of member side
     */
    eProsima_user_DllExport char side() const
    {
        return m_side;
    }

    /*!
     * @brief This function returns a reference to member side
     * @return Reference to member side
     */
    eProsima_user_DllExport char& side()
    {
        return m_side;
    }


    /*!
     * @brief This function sets a value in member weight
     * @param _weight New value for member weight
     */
    eProsima_user_DllExport void weight(
            double _weight)
    {
        m_weight = _weight;
    }

    /*!
     * @brief This function returns the value of member weight
     * @return Value of member weight
     */
    eProsima_user_DllExport double weight() const
    {
        return m_weight;
    }

    /*!
     * @brief This function returns a reference to member weight
     * @return Reference to member weight
     */
    eProsima_user_DllExport double& weight()
    {
        return m_weight;
    }



private:

    int32_t m_id{0};
    int32_t m_creatorID{0};
    std::array<char, 20> m_entityName{0};
    std::array<char, 20> m_modelName{0};
    int32_t m_visualID{0};
    int32_t m_visualModel{0};
    int32_t m_visualDetail{0};
    char m_active{0};
    uint32_t m_delayedActivationTime{0};
    char m_manned{0};
    char m_remote{0};
    char m_entityType{0};
    char m_side{0};
    double m_weight{0.0};

};
/*!
 * @brief This class represents the structure Target defined by the user in the IDL file.
 * @ingroup inse
 */
class Target
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Target()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Target()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Target that will be copied.
     */
    eProsima_user_DllExport Target(
            const Target& x)
    {
                    m_entity_id = x.m_entity_id;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Target that will be copied.
     */
    eProsima_user_DllExport Target(
            Target&& x) noexcept
    {
        m_entity_id = x.m_entity_id;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Target that will be copied.
     */
    eProsima_user_DllExport Target& operator =(
            const Target& x)
    {

                    m_entity_id = x.m_entity_id;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Target that will be copied.
     */
    eProsima_user_DllExport Target& operator =(
            Target&& x) noexcept
    {

        m_entity_id = x.m_entity_id;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Target object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Target& x) const
    {
        return (m_entity_id == x.m_entity_id);
    }

    /*!
     * @brief Comparison operator.
     * @param x Target object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Target& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member entity_id
     * @param _entity_id New value for member entity_id
     */
    eProsima_user_DllExport void entity_id(
            int32_t _entity_id)
    {
        m_entity_id = _entity_id;
    }

    /*!
     * @brief This function returns the value of member entity_id
     * @return Value of member entity_id
     */
    eProsima_user_DllExport int32_t entity_id() const
    {
        return m_entity_id;
    }

    /*!
     * @brief This function returns a reference to member entity_id
     * @return Reference to member entity_id
     */
    eProsima_user_DllExport int32_t& entity_id()
    {
        return m_entity_id;
    }



private:

    int32_t m_entity_id{0};

};
/*!
 * @brief This class represents the structure Position defined by the user in the IDL file.
 * @ingroup inse
 */
class Position
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Position()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Position()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Position that will be copied.
     */
    eProsima_user_DllExport Position(
            const Position& x)
    {
                    m_latitude = x.m_latitude;

                    m_longitude = x.m_longitude;

                    m_altitude = x.m_altitude;

                    m_altitudeAGL = x.m_altitudeAGL;

                    m_altitude_target = x.m_altitude_target;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Position that will be copied.
     */
    eProsima_user_DllExport Position(
            Position&& x) noexcept
    {
        m_latitude = x.m_latitude;
        m_longitude = x.m_longitude;
        m_altitude = x.m_altitude;
        m_altitudeAGL = x.m_altitudeAGL;
        m_altitude_target = x.m_altitude_target;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Position that will be copied.
     */
    eProsima_user_DllExport Position& operator =(
            const Position& x)
    {

                    m_latitude = x.m_latitude;

                    m_longitude = x.m_longitude;

                    m_altitude = x.m_altitude;

                    m_altitudeAGL = x.m_altitudeAGL;

                    m_altitude_target = x.m_altitude_target;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Position that will be copied.
     */
    eProsima_user_DllExport Position& operator =(
            Position&& x) noexcept
    {

        m_latitude = x.m_latitude;
        m_longitude = x.m_longitude;
        m_altitude = x.m_altitude;
        m_altitudeAGL = x.m_altitudeAGL;
        m_altitude_target = x.m_altitude_target;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Position object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Position& x) const
    {
        return (m_latitude == x.m_latitude &&
           m_longitude == x.m_longitude &&
           m_altitude == x.m_altitude &&
           m_altitudeAGL == x.m_altitudeAGL &&
           m_altitude_target == x.m_altitude_target);
    }

    /*!
     * @brief Comparison operator.
     * @param x Position object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Position& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member latitude
     * @param _latitude New value for member latitude
     */
    eProsima_user_DllExport void latitude(
            double _latitude)
    {
        m_latitude = _latitude;
    }

    /*!
     * @brief This function returns the value of member latitude
     * @return Value of member latitude
     */
    eProsima_user_DllExport double latitude() const
    {
        return m_latitude;
    }

    /*!
     * @brief This function returns a reference to member latitude
     * @return Reference to member latitude
     */
    eProsima_user_DllExport double& latitude()
    {
        return m_latitude;
    }


    /*!
     * @brief This function sets a value in member longitude
     * @param _longitude New value for member longitude
     */
    eProsima_user_DllExport void longitude(
            double _longitude)
    {
        m_longitude = _longitude;
    }

    /*!
     * @brief This function returns the value of member longitude
     * @return Value of member longitude
     */
    eProsima_user_DllExport double longitude() const
    {
        return m_longitude;
    }

    /*!
     * @brief This function returns a reference to member longitude
     * @return Reference to member longitude
     */
    eProsima_user_DllExport double& longitude()
    {
        return m_longitude;
    }


    /*!
     * @brief This function sets a value in member altitude
     * @param _altitude New value for member altitude
     */
    eProsima_user_DllExport void altitude(
            float _altitude)
    {
        m_altitude = _altitude;
    }

    /*!
     * @brief This function returns the value of member altitude
     * @return Value of member altitude
     */
    eProsima_user_DllExport float altitude() const
    {
        return m_altitude;
    }

    /*!
     * @brief This function returns a reference to member altitude
     * @return Reference to member altitude
     */
    eProsima_user_DllExport float& altitude()
    {
        return m_altitude;
    }


    /*!
     * @brief This function sets a value in member altitudeAGL
     * @param _altitudeAGL New value for member altitudeAGL
     */
    eProsima_user_DllExport void altitudeAGL(
            float _altitudeAGL)
    {
        m_altitudeAGL = _altitudeAGL;
    }

    /*!
     * @brief This function returns the value of member altitudeAGL
     * @return Value of member altitudeAGL
     */
    eProsima_user_DllExport float altitudeAGL() const
    {
        return m_altitudeAGL;
    }

    /*!
     * @brief This function returns a reference to member altitudeAGL
     * @return Reference to member altitudeAGL
     */
    eProsima_user_DllExport float& altitudeAGL()
    {
        return m_altitudeAGL;
    }


    /*!
     * @brief This function sets a value in member altitude_target
     * @param _altitude_target New value for member altitude_target
     */
    eProsima_user_DllExport void altitude_target(
            float _altitude_target)
    {
        m_altitude_target = _altitude_target;
    }

    /*!
     * @brief This function returns the value of member altitude_target
     * @return Value of member altitude_target
     */
    eProsima_user_DllExport float altitude_target() const
    {
        return m_altitude_target;
    }

    /*!
     * @brief This function returns a reference to member altitude_target
     * @return Reference to member altitude_target
     */
    eProsima_user_DllExport float& altitude_target()
    {
        return m_altitude_target;
    }



private:

    double m_latitude{0.0};
    double m_longitude{0.0};
    float m_altitude{0.0};
    float m_altitudeAGL{0.0};
    float m_altitude_target{0.0};

};
/*!
 * @brief This class represents the structure Attitude defined by the user in the IDL file.
 * @ingroup inse
 */
class Attitude
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Attitude()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Attitude()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Attitude that will be copied.
     */
    eProsima_user_DllExport Attitude(
            const Attitude& x)
    {
                    m_pitch = x.m_pitch;

                    m_yaw = x.m_yaw;

                    m_roll = x.m_roll;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Attitude that will be copied.
     */
    eProsima_user_DllExport Attitude(
            Attitude&& x) noexcept
    {
        m_pitch = x.m_pitch;
        m_yaw = x.m_yaw;
        m_roll = x.m_roll;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Attitude that will be copied.
     */
    eProsima_user_DllExport Attitude& operator =(
            const Attitude& x)
    {

                    m_pitch = x.m_pitch;

                    m_yaw = x.m_yaw;

                    m_roll = x.m_roll;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Attitude that will be copied.
     */
    eProsima_user_DllExport Attitude& operator =(
            Attitude&& x) noexcept
    {

        m_pitch = x.m_pitch;
        m_yaw = x.m_yaw;
        m_roll = x.m_roll;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Attitude object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Attitude& x) const
    {
        return (m_pitch == x.m_pitch &&
           m_yaw == x.m_yaw &&
           m_roll == x.m_roll);
    }

    /*!
     * @brief Comparison operator.
     * @param x Attitude object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Attitude& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member pitch
     * @param _pitch New value for member pitch
     */
    eProsima_user_DllExport void pitch(
            float _pitch)
    {
        m_pitch = _pitch;
    }

    /*!
     * @brief This function returns the value of member pitch
     * @return Value of member pitch
     */
    eProsima_user_DllExport float pitch() const
    {
        return m_pitch;
    }

    /*!
     * @brief This function returns a reference to member pitch
     * @return Reference to member pitch
     */
    eProsima_user_DllExport float& pitch()
    {
        return m_pitch;
    }


    /*!
     * @brief This function sets a value in member yaw
     * @param _yaw New value for member yaw
     */
    eProsima_user_DllExport void yaw(
            float _yaw)
    {
        m_yaw = _yaw;
    }

    /*!
     * @brief This function returns the value of member yaw
     * @return Value of member yaw
     */
    eProsima_user_DllExport float yaw() const
    {
        return m_yaw;
    }

    /*!
     * @brief This function returns a reference to member yaw
     * @return Reference to member yaw
     */
    eProsima_user_DllExport float& yaw()
    {
        return m_yaw;
    }


    /*!
     * @brief This function sets a value in member roll
     * @param _roll New value for member roll
     */
    eProsima_user_DllExport void roll(
            float _roll)
    {
        m_roll = _roll;
    }

    /*!
     * @brief This function returns the value of member roll
     * @return Value of member roll
     */
    eProsima_user_DllExport float roll() const
    {
        return m_roll;
    }

    /*!
     * @brief This function returns a reference to member roll
     * @return Reference to member roll
     */
    eProsima_user_DllExport float& roll()
    {
        return m_roll;
    }



private:

    float m_pitch{0.0};
    float m_yaw{0.0};
    float m_roll{0.0};

};
/*!
 * @brief This class represents the structure MovementAirEntity defined by the user in the IDL file.
 * @ingroup inse
 */
class MovementAirEntity
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MovementAirEntity()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MovementAirEntity()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MovementAirEntity that will be copied.
     */
    eProsima_user_DllExport MovementAirEntity(
            const MovementAirEntity& x)
    {
                    m_speed = x.m_speed;

                    m_speed_target = x.m_speed_target;

                    m_geographicHeading = x.m_geographicHeading;

                    m_geographicHeading_target = x.m_geographicHeading_target;

                    m_magneticHeading = x.m_magneticHeading;

                    m_tmllf = x.m_tmllf;

                    m_onGround = x.m_onGround;

                    m_missionName = x.m_missionName;

                    m_indicatedSpeed = x.m_indicatedSpeed;

                    m_indicatedSpeed_target = x.m_indicatedSpeed_target;

                    m_loadFactor = x.m_loadFactor;

                    m_verticalSpeed = x.m_verticalSpeed;

                    m_verticalSpeed_target = x.m_verticalSpeed_target;

                    m_groundSpeed = x.m_groundSpeed;

                    m_groundSpeed_target = x.m_groundSpeed_target;

                    m_throttle = x.m_throttle;

                    m_infiniteFuel = x.m_infiniteFuel;

                    m_initialFuel = x.m_initialFuel;

                    m_currentFuel = x.m_currentFuel;

                    m_fuelConsumption = x.m_fuelConsumption;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MovementAirEntity that will be copied.
     */
    eProsima_user_DllExport MovementAirEntity(
            MovementAirEntity&& x) noexcept
    {
        m_speed = x.m_speed;
        m_speed_target = x.m_speed_target;
        m_geographicHeading = x.m_geographicHeading;
        m_geographicHeading_target = x.m_geographicHeading_target;
        m_magneticHeading = x.m_magneticHeading;
        m_tmllf = x.m_tmllf;
        m_onGround = x.m_onGround;
        m_missionName = std::move(x.m_missionName);
        m_indicatedSpeed = x.m_indicatedSpeed;
        m_indicatedSpeed_target = x.m_indicatedSpeed_target;
        m_loadFactor = x.m_loadFactor;
        m_verticalSpeed = x.m_verticalSpeed;
        m_verticalSpeed_target = x.m_verticalSpeed_target;
        m_groundSpeed = x.m_groundSpeed;
        m_groundSpeed_target = x.m_groundSpeed_target;
        m_throttle = x.m_throttle;
        m_infiniteFuel = x.m_infiniteFuel;
        m_initialFuel = x.m_initialFuel;
        m_currentFuel = x.m_currentFuel;
        m_fuelConsumption = x.m_fuelConsumption;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MovementAirEntity that will be copied.
     */
    eProsima_user_DllExport MovementAirEntity& operator =(
            const MovementAirEntity& x)
    {

                    m_speed = x.m_speed;

                    m_speed_target = x.m_speed_target;

                    m_geographicHeading = x.m_geographicHeading;

                    m_geographicHeading_target = x.m_geographicHeading_target;

                    m_magneticHeading = x.m_magneticHeading;

                    m_tmllf = x.m_tmllf;

                    m_onGround = x.m_onGround;

                    m_missionName = x.m_missionName;

                    m_indicatedSpeed = x.m_indicatedSpeed;

                    m_indicatedSpeed_target = x.m_indicatedSpeed_target;

                    m_loadFactor = x.m_loadFactor;

                    m_verticalSpeed = x.m_verticalSpeed;

                    m_verticalSpeed_target = x.m_verticalSpeed_target;

                    m_groundSpeed = x.m_groundSpeed;

                    m_groundSpeed_target = x.m_groundSpeed_target;

                    m_throttle = x.m_throttle;

                    m_infiniteFuel = x.m_infiniteFuel;

                    m_initialFuel = x.m_initialFuel;

                    m_currentFuel = x.m_currentFuel;

                    m_fuelConsumption = x.m_fuelConsumption;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MovementAirEntity that will be copied.
     */
    eProsima_user_DllExport MovementAirEntity& operator =(
            MovementAirEntity&& x) noexcept
    {

        m_speed = x.m_speed;
        m_speed_target = x.m_speed_target;
        m_geographicHeading = x.m_geographicHeading;
        m_geographicHeading_target = x.m_geographicHeading_target;
        m_magneticHeading = x.m_magneticHeading;
        m_tmllf = x.m_tmllf;
        m_onGround = x.m_onGround;
        m_missionName = std::move(x.m_missionName);
        m_indicatedSpeed = x.m_indicatedSpeed;
        m_indicatedSpeed_target = x.m_indicatedSpeed_target;
        m_loadFactor = x.m_loadFactor;
        m_verticalSpeed = x.m_verticalSpeed;
        m_verticalSpeed_target = x.m_verticalSpeed_target;
        m_groundSpeed = x.m_groundSpeed;
        m_groundSpeed_target = x.m_groundSpeed_target;
        m_throttle = x.m_throttle;
        m_infiniteFuel = x.m_infiniteFuel;
        m_initialFuel = x.m_initialFuel;
        m_currentFuel = x.m_currentFuel;
        m_fuelConsumption = x.m_fuelConsumption;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MovementAirEntity object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MovementAirEntity& x) const
    {
        return (m_speed == x.m_speed &&
           m_speed_target == x.m_speed_target &&
           m_geographicHeading == x.m_geographicHeading &&
           m_geographicHeading_target == x.m_geographicHeading_target &&
           m_magneticHeading == x.m_magneticHeading &&
           m_tmllf == x.m_tmllf &&
           m_onGround == x.m_onGround &&
           m_missionName == x.m_missionName &&
           m_indicatedSpeed == x.m_indicatedSpeed &&
           m_indicatedSpeed_target == x.m_indicatedSpeed_target &&
           m_loadFactor == x.m_loadFactor &&
           m_verticalSpeed == x.m_verticalSpeed &&
           m_verticalSpeed_target == x.m_verticalSpeed_target &&
           m_groundSpeed == x.m_groundSpeed &&
           m_groundSpeed_target == x.m_groundSpeed_target &&
           m_throttle == x.m_throttle &&
           m_infiniteFuel == x.m_infiniteFuel &&
           m_initialFuel == x.m_initialFuel &&
           m_currentFuel == x.m_currentFuel &&
           m_fuelConsumption == x.m_fuelConsumption);
    }

    /*!
     * @brief Comparison operator.
     * @param x MovementAirEntity object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MovementAirEntity& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member speed
     * @param _speed New value for member speed
     */
    eProsima_user_DllExport void speed(
            float _speed)
    {
        m_speed = _speed;
    }

    /*!
     * @brief This function returns the value of member speed
     * @return Value of member speed
     */
    eProsima_user_DllExport float speed() const
    {
        return m_speed;
    }

    /*!
     * @brief This function returns a reference to member speed
     * @return Reference to member speed
     */
    eProsima_user_DllExport float& speed()
    {
        return m_speed;
    }


    /*!
     * @brief This function sets a value in member speed_target
     * @param _speed_target New value for member speed_target
     */
    eProsima_user_DllExport void speed_target(
            float _speed_target)
    {
        m_speed_target = _speed_target;
    }

    /*!
     * @brief This function returns the value of member speed_target
     * @return Value of member speed_target
     */
    eProsima_user_DllExport float speed_target() const
    {
        return m_speed_target;
    }

    /*!
     * @brief This function returns a reference to member speed_target
     * @return Reference to member speed_target
     */
    eProsima_user_DllExport float& speed_target()
    {
        return m_speed_target;
    }


    /*!
     * @brief This function sets a value in member geographicHeading
     * @param _geographicHeading New value for member geographicHeading
     */
    eProsima_user_DllExport void geographicHeading(
            float _geographicHeading)
    {
        m_geographicHeading = _geographicHeading;
    }

    /*!
     * @brief This function returns the value of member geographicHeading
     * @return Value of member geographicHeading
     */
    eProsima_user_DllExport float geographicHeading() const
    {
        return m_geographicHeading;
    }

    /*!
     * @brief This function returns a reference to member geographicHeading
     * @return Reference to member geographicHeading
     */
    eProsima_user_DllExport float& geographicHeading()
    {
        return m_geographicHeading;
    }


    /*!
     * @brief This function sets a value in member geographicHeading_target
     * @param _geographicHeading_target New value for member geographicHeading_target
     */
    eProsima_user_DllExport void geographicHeading_target(
            float _geographicHeading_target)
    {
        m_geographicHeading_target = _geographicHeading_target;
    }

    /*!
     * @brief This function returns the value of member geographicHeading_target
     * @return Value of member geographicHeading_target
     */
    eProsima_user_DllExport float geographicHeading_target() const
    {
        return m_geographicHeading_target;
    }

    /*!
     * @brief This function returns a reference to member geographicHeading_target
     * @return Reference to member geographicHeading_target
     */
    eProsima_user_DllExport float& geographicHeading_target()
    {
        return m_geographicHeading_target;
    }


    /*!
     * @brief This function sets a value in member magneticHeading
     * @param _magneticHeading New value for member magneticHeading
     */
    eProsima_user_DllExport void magneticHeading(
            float _magneticHeading)
    {
        m_magneticHeading = _magneticHeading;
    }

    /*!
     * @brief This function returns the value of member magneticHeading
     * @return Value of member magneticHeading
     */
    eProsima_user_DllExport float magneticHeading() const
    {
        return m_magneticHeading;
    }

    /*!
     * @brief This function returns a reference to member magneticHeading
     * @return Reference to member magneticHeading
     */
    eProsima_user_DllExport float& magneticHeading()
    {
        return m_magneticHeading;
    }


    /*!
     * @brief This function sets a value in member tmllf
     * @param _tmllf New value for member tmllf
     */
    eProsima_user_DllExport void tmllf(
            char _tmllf)
    {
        m_tmllf = _tmllf;
    }

    /*!
     * @brief This function returns the value of member tmllf
     * @return Value of member tmllf
     */
    eProsima_user_DllExport char tmllf() const
    {
        return m_tmllf;
    }

    /*!
     * @brief This function returns a reference to member tmllf
     * @return Reference to member tmllf
     */
    eProsima_user_DllExport char& tmllf()
    {
        return m_tmllf;
    }


    /*!
     * @brief This function sets a value in member onGround
     * @param _onGround New value for member onGround
     */
    eProsima_user_DllExport void onGround(
            char _onGround)
    {
        m_onGround = _onGround;
    }

    /*!
     * @brief This function returns the value of member onGround
     * @return Value of member onGround
     */
    eProsima_user_DllExport char onGround() const
    {
        return m_onGround;
    }

    /*!
     * @brief This function returns a reference to member onGround
     * @return Reference to member onGround
     */
    eProsima_user_DllExport char& onGround()
    {
        return m_onGround;
    }


    /*!
     * @brief This function copies the value in member missionName
     * @param _missionName New value to be copied in member missionName
     */
    eProsima_user_DllExport void missionName(
            const std::array<char, 32>& _missionName)
    {
        m_missionName = _missionName;
    }

    /*!
     * @brief This function moves the value in member missionName
     * @param _missionName New value to be moved in member missionName
     */
    eProsima_user_DllExport void missionName(
            std::array<char, 32>&& _missionName)
    {
        m_missionName = std::move(_missionName);
    }

    /*!
     * @brief This function returns a constant reference to member missionName
     * @return Constant reference to member missionName
     */
    eProsima_user_DllExport const std::array<char, 32>& missionName() const
    {
        return m_missionName;
    }

    /*!
     * @brief This function returns a reference to member missionName
     * @return Reference to member missionName
     */
    eProsima_user_DllExport std::array<char, 32>& missionName()
    {
        return m_missionName;
    }


    /*!
     * @brief This function sets a value in member indicatedSpeed
     * @param _indicatedSpeed New value for member indicatedSpeed
     */
    eProsima_user_DllExport void indicatedSpeed(
            float _indicatedSpeed)
    {
        m_indicatedSpeed = _indicatedSpeed;
    }

    /*!
     * @brief This function returns the value of member indicatedSpeed
     * @return Value of member indicatedSpeed
     */
    eProsima_user_DllExport float indicatedSpeed() const
    {
        return m_indicatedSpeed;
    }

    /*!
     * @brief This function returns a reference to member indicatedSpeed
     * @return Reference to member indicatedSpeed
     */
    eProsima_user_DllExport float& indicatedSpeed()
    {
        return m_indicatedSpeed;
    }


    /*!
     * @brief This function sets a value in member indicatedSpeed_target
     * @param _indicatedSpeed_target New value for member indicatedSpeed_target
     */
    eProsima_user_DllExport void indicatedSpeed_target(
            float _indicatedSpeed_target)
    {
        m_indicatedSpeed_target = _indicatedSpeed_target;
    }

    /*!
     * @brief This function returns the value of member indicatedSpeed_target
     * @return Value of member indicatedSpeed_target
     */
    eProsima_user_DllExport float indicatedSpeed_target() const
    {
        return m_indicatedSpeed_target;
    }

    /*!
     * @brief This function returns a reference to member indicatedSpeed_target
     * @return Reference to member indicatedSpeed_target
     */
    eProsima_user_DllExport float& indicatedSpeed_target()
    {
        return m_indicatedSpeed_target;
    }


    /*!
     * @brief This function sets a value in member loadFactor
     * @param _loadFactor New value for member loadFactor
     */
    eProsima_user_DllExport void loadFactor(
            float _loadFactor)
    {
        m_loadFactor = _loadFactor;
    }

    /*!
     * @brief This function returns the value of member loadFactor
     * @return Value of member loadFactor
     */
    eProsima_user_DllExport float loadFactor() const
    {
        return m_loadFactor;
    }

    /*!
     * @brief This function returns a reference to member loadFactor
     * @return Reference to member loadFactor
     */
    eProsima_user_DllExport float& loadFactor()
    {
        return m_loadFactor;
    }


    /*!
     * @brief This function sets a value in member verticalSpeed
     * @param _verticalSpeed New value for member verticalSpeed
     */
    eProsima_user_DllExport void verticalSpeed(
            float _verticalSpeed)
    {
        m_verticalSpeed = _verticalSpeed;
    }

    /*!
     * @brief This function returns the value of member verticalSpeed
     * @return Value of member verticalSpeed
     */
    eProsima_user_DllExport float verticalSpeed() const
    {
        return m_verticalSpeed;
    }

    /*!
     * @brief This function returns a reference to member verticalSpeed
     * @return Reference to member verticalSpeed
     */
    eProsima_user_DllExport float& verticalSpeed()
    {
        return m_verticalSpeed;
    }


    /*!
     * @brief This function sets a value in member verticalSpeed_target
     * @param _verticalSpeed_target New value for member verticalSpeed_target
     */
    eProsima_user_DllExport void verticalSpeed_target(
            float _verticalSpeed_target)
    {
        m_verticalSpeed_target = _verticalSpeed_target;
    }

    /*!
     * @brief This function returns the value of member verticalSpeed_target
     * @return Value of member verticalSpeed_target
     */
    eProsima_user_DllExport float verticalSpeed_target() const
    {
        return m_verticalSpeed_target;
    }

    /*!
     * @brief This function returns a reference to member verticalSpeed_target
     * @return Reference to member verticalSpeed_target
     */
    eProsima_user_DllExport float& verticalSpeed_target()
    {
        return m_verticalSpeed_target;
    }


    /*!
     * @brief This function sets a value in member groundSpeed
     * @param _groundSpeed New value for member groundSpeed
     */
    eProsima_user_DllExport void groundSpeed(
            float _groundSpeed)
    {
        m_groundSpeed = _groundSpeed;
    }

    /*!
     * @brief This function returns the value of member groundSpeed
     * @return Value of member groundSpeed
     */
    eProsima_user_DllExport float groundSpeed() const
    {
        return m_groundSpeed;
    }

    /*!
     * @brief This function returns a reference to member groundSpeed
     * @return Reference to member groundSpeed
     */
    eProsima_user_DllExport float& groundSpeed()
    {
        return m_groundSpeed;
    }


    /*!
     * @brief This function sets a value in member groundSpeed_target
     * @param _groundSpeed_target New value for member groundSpeed_target
     */
    eProsima_user_DllExport void groundSpeed_target(
            float _groundSpeed_target)
    {
        m_groundSpeed_target = _groundSpeed_target;
    }

    /*!
     * @brief This function returns the value of member groundSpeed_target
     * @return Value of member groundSpeed_target
     */
    eProsima_user_DllExport float groundSpeed_target() const
    {
        return m_groundSpeed_target;
    }

    /*!
     * @brief This function returns a reference to member groundSpeed_target
     * @return Reference to member groundSpeed_target
     */
    eProsima_user_DllExport float& groundSpeed_target()
    {
        return m_groundSpeed_target;
    }


    /*!
     * @brief This function sets a value in member throttle
     * @param _throttle New value for member throttle
     */
    eProsima_user_DllExport void throttle(
            float _throttle)
    {
        m_throttle = _throttle;
    }

    /*!
     * @brief This function returns the value of member throttle
     * @return Value of member throttle
     */
    eProsima_user_DllExport float throttle() const
    {
        return m_throttle;
    }

    /*!
     * @brief This function returns a reference to member throttle
     * @return Reference to member throttle
     */
    eProsima_user_DllExport float& throttle()
    {
        return m_throttle;
    }


    /*!
     * @brief This function sets a value in member infiniteFuel
     * @param _infiniteFuel New value for member infiniteFuel
     */
    eProsima_user_DllExport void infiniteFuel(
            bool _infiniteFuel)
    {
        m_infiniteFuel = _infiniteFuel;
    }

    /*!
     * @brief This function returns the value of member infiniteFuel
     * @return Value of member infiniteFuel
     */
    eProsima_user_DllExport bool infiniteFuel() const
    {
        return m_infiniteFuel;
    }

    /*!
     * @brief This function returns a reference to member infiniteFuel
     * @return Reference to member infiniteFuel
     */
    eProsima_user_DllExport bool& infiniteFuel()
    {
        return m_infiniteFuel;
    }


    /*!
     * @brief This function sets a value in member initialFuel
     * @param _initialFuel New value for member initialFuel
     */
    eProsima_user_DllExport void initialFuel(
            float _initialFuel)
    {
        m_initialFuel = _initialFuel;
    }

    /*!
     * @brief This function returns the value of member initialFuel
     * @return Value of member initialFuel
     */
    eProsima_user_DllExport float initialFuel() const
    {
        return m_initialFuel;
    }

    /*!
     * @brief This function returns a reference to member initialFuel
     * @return Reference to member initialFuel
     */
    eProsima_user_DllExport float& initialFuel()
    {
        return m_initialFuel;
    }


    /*!
     * @brief This function sets a value in member currentFuel
     * @param _currentFuel New value for member currentFuel
     */
    eProsima_user_DllExport void currentFuel(
            float _currentFuel)
    {
        m_currentFuel = _currentFuel;
    }

    /*!
     * @brief This function returns the value of member currentFuel
     * @return Value of member currentFuel
     */
    eProsima_user_DllExport float currentFuel() const
    {
        return m_currentFuel;
    }

    /*!
     * @brief This function returns a reference to member currentFuel
     * @return Reference to member currentFuel
     */
    eProsima_user_DllExport float& currentFuel()
    {
        return m_currentFuel;
    }


    /*!
     * @brief This function sets a value in member fuelConsumption
     * @param _fuelConsumption New value for member fuelConsumption
     */
    eProsima_user_DllExport void fuelConsumption(
            float _fuelConsumption)
    {
        m_fuelConsumption = _fuelConsumption;
    }

    /*!
     * @brief This function returns the value of member fuelConsumption
     * @return Value of member fuelConsumption
     */
    eProsima_user_DllExport float fuelConsumption() const
    {
        return m_fuelConsumption;
    }

    /*!
     * @brief This function returns a reference to member fuelConsumption
     * @return Reference to member fuelConsumption
     */
    eProsima_user_DllExport float& fuelConsumption()
    {
        return m_fuelConsumption;
    }



private:

    float m_speed{0.0};
    float m_speed_target{0.0};
    float m_geographicHeading{0.0};
    float m_geographicHeading_target{0.0};
    float m_magneticHeading{0.0};
    char m_tmllf{0};
    char m_onGround{0};
    std::array<char, 32> m_missionName{0};
    float m_indicatedSpeed{0.0};
    float m_indicatedSpeed_target{0.0};
    float m_loadFactor{0.0};
    float m_verticalSpeed{0.0};
    float m_verticalSpeed_target{0.0};
    float m_groundSpeed{0.0};
    float m_groundSpeed_target{0.0};
    float m_throttle{0.0};
    bool m_infiniteFuel{false};
    float m_initialFuel{0.0};
    float m_currentFuel{0.0};
    float m_fuelConsumption{0.0};

};
/*!
 * @brief This class represents the structure AirEntity defined by the user in the IDL file.
 * @ingroup inse
 */
class AirEntity
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AirEntity()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AirEntity()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AirEntity that will be copied.
     */
    eProsima_user_DllExport AirEntity(
            const AirEntity& x)
    {
                    m_id = x.m_id;

                    m_entity_attitude = x.m_entity_attitude;

                    m_movement = x.m_movement;

                    m_commsActive = x.m_commsActive;

                    m_formationID = x.m_formationID;

                    m_posInt_inseoFormation = x.m_posInt_inseoFormation;

                    m_isAutomaticTraffic = x.m_isAutomaticTraffic;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AirEntity that will be copied.
     */
    eProsima_user_DllExport AirEntity(
            AirEntity&& x) noexcept
    {
        m_id = x.m_id;
        m_entity_attitude = std::move(x.m_entity_attitude);
        m_movement = std::move(x.m_movement);
        m_commsActive = x.m_commsActive;
        m_formationID = x.m_formationID;
        m_posInt_inseoFormation = x.m_posInt_inseoFormation;
        m_isAutomaticTraffic = x.m_isAutomaticTraffic;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AirEntity that will be copied.
     */
    eProsima_user_DllExport AirEntity& operator =(
            const AirEntity& x)
    {

                    m_id = x.m_id;

                    m_entity_attitude = x.m_entity_attitude;

                    m_movement = x.m_movement;

                    m_commsActive = x.m_commsActive;

                    m_formationID = x.m_formationID;

                    m_posInt_inseoFormation = x.m_posInt_inseoFormation;

                    m_isAutomaticTraffic = x.m_isAutomaticTraffic;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AirEntity that will be copied.
     */
    eProsima_user_DllExport AirEntity& operator =(
            AirEntity&& x) noexcept
    {

        m_id = x.m_id;
        m_entity_attitude = std::move(x.m_entity_attitude);
        m_movement = std::move(x.m_movement);
        m_commsActive = x.m_commsActive;
        m_formationID = x.m_formationID;
        m_posInt_inseoFormation = x.m_posInt_inseoFormation;
        m_isAutomaticTraffic = x.m_isAutomaticTraffic;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x AirEntity object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AirEntity& x) const
    {
        return (m_id == x.m_id &&
           m_entity_attitude == x.m_entity_attitude &&
           m_movement == x.m_movement &&
           m_commsActive == x.m_commsActive &&
           m_formationID == x.m_formationID &&
           m_posInt_inseoFormation == x.m_posInt_inseoFormation &&
           m_isAutomaticTraffic == x.m_isAutomaticTraffic);
    }

    /*!
     * @brief Comparison operator.
     * @param x AirEntity object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AirEntity& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(
            int32_t _id)
    {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport int32_t id() const
    {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport int32_t& id()
    {
        return m_id;
    }


    /*!
     * @brief This function copies the value in member entity_attitude
     * @param _entity_attitude New value to be copied in member entity_attitude
     */
    eProsima_user_DllExport void entity_attitude(
            const Attitude& _entity_attitude)
    {
        m_entity_attitude = _entity_attitude;
    }

    /*!
     * @brief This function moves the value in member entity_attitude
     * @param _entity_attitude New value to be moved in member entity_attitude
     */
    eProsima_user_DllExport void entity_attitude(
            Attitude&& _entity_attitude)
    {
        m_entity_attitude = std::move(_entity_attitude);
    }

    /*!
     * @brief This function returns a constant reference to member entity_attitude
     * @return Constant reference to member entity_attitude
     */
    eProsima_user_DllExport const Attitude& entity_attitude() const
    {
        return m_entity_attitude;
    }

    /*!
     * @brief This function returns a reference to member entity_attitude
     * @return Reference to member entity_attitude
     */
    eProsima_user_DllExport Attitude& entity_attitude()
    {
        return m_entity_attitude;
    }


    /*!
     * @brief This function copies the value in member movement
     * @param _movement New value to be copied in member movement
     */
    eProsima_user_DllExport void movement(
            const MovementAirEntity& _movement)
    {
        m_movement = _movement;
    }

    /*!
     * @brief This function moves the value in member movement
     * @param _movement New value to be moved in member movement
     */
    eProsima_user_DllExport void movement(
            MovementAirEntity&& _movement)
    {
        m_movement = std::move(_movement);
    }

    /*!
     * @brief This function returns a constant reference to member movement
     * @return Constant reference to member movement
     */
    eProsima_user_DllExport const MovementAirEntity& movement() const
    {
        return m_movement;
    }

    /*!
     * @brief This function returns a reference to member movement
     * @return Reference to member movement
     */
    eProsima_user_DllExport MovementAirEntity& movement()
    {
        return m_movement;
    }


    /*!
     * @brief This function sets a value in member commsActive
     * @param _commsActive New value for member commsActive
     */
    eProsima_user_DllExport void commsActive(
            char _commsActive)
    {
        m_commsActive = _commsActive;
    }

    /*!
     * @brief This function returns the value of member commsActive
     * @return Value of member commsActive
     */
    eProsima_user_DllExport char commsActive() const
    {
        return m_commsActive;
    }

    /*!
     * @brief This function returns a reference to member commsActive
     * @return Reference to member commsActive
     */
    eProsima_user_DllExport char& commsActive()
    {
        return m_commsActive;
    }


    /*!
     * @brief This function sets a value in member formationID
     * @param _formationID New value for member formationID
     */
    eProsima_user_DllExport void formationID(
            int32_t _formationID)
    {
        m_formationID = _formationID;
    }

    /*!
     * @brief This function returns the value of member formationID
     * @return Value of member formationID
     */
    eProsima_user_DllExport int32_t formationID() const
    {
        return m_formationID;
    }

    /*!
     * @brief This function returns a reference to member formationID
     * @return Reference to member formationID
     */
    eProsima_user_DllExport int32_t& formationID()
    {
        return m_formationID;
    }


    /*!
     * @brief This function sets a value in member posInt_inseoFormation
     * @param _posInt_inseoFormation New value for member posInt_inseoFormation
     */
    eProsima_user_DllExport void posInt_inseoFormation(
            int32_t _posInt_inseoFormation)
    {
        m_posInt_inseoFormation = _posInt_inseoFormation;
    }

    /*!
     * @brief This function returns the value of member posInt_inseoFormation
     * @return Value of member posInt_inseoFormation
     */
    eProsima_user_DllExport int32_t posInt_inseoFormation() const
    {
        return m_posInt_inseoFormation;
    }

    /*!
     * @brief This function returns a reference to member posInt_inseoFormation
     * @return Reference to member posInt_inseoFormation
     */
    eProsima_user_DllExport int32_t& posInt_inseoFormation()
    {
        return m_posInt_inseoFormation;
    }


    /*!
     * @brief This function sets a value in member isAutomaticTraffic
     * @param _isAutomaticTraffic New value for member isAutomaticTraffic
     */
    eProsima_user_DllExport void isAutomaticTraffic(
            char _isAutomaticTraffic)
    {
        m_isAutomaticTraffic = _isAutomaticTraffic;
    }

    /*!
     * @brief This function returns the value of member isAutomaticTraffic
     * @return Value of member isAutomaticTraffic
     */
    eProsima_user_DllExport char isAutomaticTraffic() const
    {
        return m_isAutomaticTraffic;
    }

    /*!
     * @brief This function returns a reference to member isAutomaticTraffic
     * @return Reference to member isAutomaticTraffic
     */
    eProsima_user_DllExport char& isAutomaticTraffic()
    {
        return m_isAutomaticTraffic;
    }



private:

    int32_t m_id{0};
    Attitude m_entity_attitude;
    MovementAirEntity m_movement;
    char m_commsActive{0};
    int32_t m_formationID{0};
    int32_t m_posInt_inseoFormation{0};
    char m_isAutomaticTraffic{0};

};

#endif // _FAST_DDS_GENERATED_INSE_HPP_


